Nonterminals useless in grammar

   funcs
   args
   lista_args
   parte_arr
   sents


Terminals unused in grammar

   END
   FUNC


Rules useless in grammar

   71 funcs: FUNC tipo ID LPAR args RPAR LCURLYB decls sents RCURLYB funcs
   72      | %empty

   73 args: lista_args
   74     | %empty

   75 lista_args: lista_args COMMA tipo ID parte_arr
   76           | tipo ID parte_arr

   77 parte_arr: LBRACKET RBRACKET parte_arr
   78          | %empty

   79 sents: sents sent
   80      | sent


Grammar

    0 $accept: prog $end

    1 $@1: %empty

    2 $@2: %empty

    3 prog: $@1 decls $@2 sent

    4 $@3: %empty

    5 decls: tipo $@3 lista SEMICOLON decls
    6      | %empty

    7 tipo: INTTYPE
    8     | FLOATTYPE
    9     | DOUBLETYPE
   10     | CHARTYPE
   11     | VOID

   12 $@4: %empty

   13 tipo: STRUCT LCURLYB $@4 decls RCURLYB

   14 lista: lista COMMA ID arreglo
   15      | ID arreglo

   16 numero: INT
   17       | DOUBLE
   18       | FLOAT

   19 arreglo: LBRACKET numero RBRACKET arreglo
   20        | %empty

   21 sent: IF LPAR cond RPAR sent
   22     | IF LPAR cond RPAR sent ELSE sent
   23     | WHILE LPAR cond RPAR sent
   24     | DO sent WHILE LPAR cond RPAR SEMICOLON
   25     | FOR LPAR sent SEMICOLON cond SEMICOLON sent RPAR sent
   26     | parte_izq ASSIG exp SEMICOLON
   27     | RETURN exp SEMICOLON
   28     | RETURN SEMICOLON
   29     | LCURLYB sent RCURLYB
   30     | SWITCH LPAR exp RPAR LCURLYB casos RCURLYB
   31     | BREAK SEMICOLON
   32     | PRINT exp SEMICOLON

   33 casos: CASE numero sent casos
   34      | DEFAULT sent
   35      | %empty

   36 parte_izq: ID
   37          | var_arr
   38          | ID DOT ID

   39 var_arr: ID LBRACKET exp RBRACKET
   40        | var_arr LBRACKET exp RBRACKET

   41 exp: exp PLUS exp
   42    | exp MINUS exp
   43    | exp PROD exp
   44    | exp DIV exp
   45    | exp MOD exp
   46    | var_arr
   47    | ID
   48    | CADENA
   49    | numero
   50    | CARACTER
   51    | ID LPAR params RPAR

   52 params: lista_param
   53       | %empty

   54 lista_param: lista_param COMMA exp
   55            | exp

   56 $@5: %empty

   57 cond: cond OR $@5 cond

   58 $@6: %empty

   59 cond: cond AND $@6 cond
   60     | NOT cond
   61     | LPAR cond RPAR
   62     | exp rel exp
   63     | TRUE
   64     | FALSE

   65 rel: LT
   66    | GT
   67    | LEQ
   68    | GEQ
   69    | NEQ
   70    | EQ


Terminals, with rules where they appear

$end (0) 0
error (256)
END (258)
INTTYPE (259) 7
FLOATTYPE (260) 8
DOUBLETYPE (261) 9
CHARTYPE (262) 10
VOID (263) 11
FUNC (264)
STRUCT (265) 13
LCURLYB (266) 13 29 30
RCURLYB (267) 13 29 30
LBRACKET (268) 19 39 40
RBRACKET (269) 19 39 40
SEMICOLON (270) 5 24 25 26 27 28 31 32
DOT (271) 38
TRUE (272) 63
FALSE (273) 64
IF (274) 21 22
ELSE (275) 22
WHILE (276) 23 24
DO (277) 24
SWITCH (278) 30
CASE (279) 33
DEFAULT (280) 34
BREAK (281) 31
PRINT (282) 32
ID (283) 14 15 36 38 39 47 51
INT (284) 16
DOUBLE (285) 17
FLOAT (286) 18
CADENA (287) 48
CARACTER (288) 50
COMMA (289) 14 54
RETURN (290) 27 28
FOR (291) 25
ASSIG (292) 26
OR (293) 57
AND (294) 59
EQ (295) 70
NEQ (296) 69
GT (297) 66
GEQ (298) 68
LT (299) 65
LEQ (300) 67
PLUS (301) 41
MINUS (302) 42
PROD (303) 43
DIV (304) 44
MOD (305) 45
NOT (306) 60
LPAR (307) 21 22 23 24 25 30 51 61
RPAR (308) 21 22 23 24 25 30 51 61
"then" (309)


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
prog (56)
    on left: 3, on right: 0
$@1 (57)
    on left: 1, on right: 3
$@2 (58)
    on left: 2, on right: 3
decls (59)
    on left: 5 6, on right: 3 5 13
$@3 (60)
    on left: 4, on right: 5
tipo (61)
    on left: 7 8 9 10 11 13, on right: 5
$@4 (62)
    on left: 12, on right: 13
lista (63)
    on left: 14 15, on right: 5 14
numero (64)
    on left: 16 17 18, on right: 19 33 49
arreglo (65)
    on left: 19 20, on right: 14 15 19
sent (66)
    on left: 21 22 23 24 25 26 27 28 29 30 31 32, on right: 3 21 22
    23 24 25 29 33 34
casos (67)
    on left: 33 34 35, on right: 30 33
parte_izq (68)
    on left: 36 37 38, on right: 26
var_arr (69)
    on left: 39 40, on right: 37 40 46
exp (70)
    on left: 41 42 43 44 45 46 47 48 49 50 51, on right: 26 27 30 32
    39 40 41 42 43 44 45 54 55 62
params (71)
    on left: 52 53, on right: 51
lista_param (72)
    on left: 54 55, on right: 52 54
cond (73)
    on left: 57 59 60 61 62 63 64, on right: 21 22 23 24 25 57 59 60
    61
$@5 (74)
    on left: 56, on right: 57
$@6 (75)
    on left: 58, on right: 59
rel (76)
    on left: 65 66 67 68 69 70, on right: 62


State 0

    0 $accept: . prog $end

    $default  reduce using rule 1 ($@1)

    prog  go to state 1
    $@1   go to state 2


State 1

    0 $accept: prog . $end

    $end  shift, and go to state 3


State 2

    3 prog: $@1 . decls $@2 sent

    INTTYPE     shift, and go to state 4
    FLOATTYPE   shift, and go to state 5
    DOUBLETYPE  shift, and go to state 6
    CHARTYPE    shift, and go to state 7
    VOID        shift, and go to state 8
    STRUCT      shift, and go to state 9

    $default  reduce using rule 6 (decls)

    decls  go to state 10
    tipo   go to state 11


State 3

    0 $accept: prog $end .

    $default  accept


State 4

    7 tipo: INTTYPE .

    $default  reduce using rule 7 (tipo)


State 5

    8 tipo: FLOATTYPE .

    $default  reduce using rule 8 (tipo)


State 6

    9 tipo: DOUBLETYPE .

    $default  reduce using rule 9 (tipo)


State 7

   10 tipo: CHARTYPE .

    $default  reduce using rule 10 (tipo)


State 8

   11 tipo: VOID .

    $default  reduce using rule 11 (tipo)


State 9

   13 tipo: STRUCT . LCURLYB $@4 decls RCURLYB

    LCURLYB  shift, and go to state 12


State 10

    3 prog: $@1 decls . $@2 sent

    $default  reduce using rule 2 ($@2)

    $@2  go to state 13


State 11

    5 decls: tipo . $@3 lista SEMICOLON decls

    $default  reduce using rule 4 ($@3)

    $@3  go to state 14


State 12

   13 tipo: STRUCT LCURLYB . $@4 decls RCURLYB

    $default  reduce using rule 12 ($@4)

    $@4  go to state 15


State 13

    3 prog: $@1 decls $@2 . sent

    LCURLYB  shift, and go to state 16
    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    DO       shift, and go to state 19
    SWITCH   shift, and go to state 20
    BREAK    shift, and go to state 21
    PRINT    shift, and go to state 22
    ID       shift, and go to state 23
    RETURN   shift, and go to state 24
    FOR      shift, and go to state 25

    sent       go to state 26
    parte_izq  go to state 27
    var_arr    go to state 28


State 14

    5 decls: tipo $@3 . lista SEMICOLON decls

    ID  shift, and go to state 29

    lista  go to state 30


State 15

   13 tipo: STRUCT LCURLYB $@4 . decls RCURLYB

    INTTYPE     shift, and go to state 4
    FLOATTYPE   shift, and go to state 5
    DOUBLETYPE  shift, and go to state 6
    CHARTYPE    shift, and go to state 7
    VOID        shift, and go to state 8
    STRUCT      shift, and go to state 9

    $default  reduce using rule 6 (decls)

    decls  go to state 31
    tipo   go to state 11


State 16

   29 sent: LCURLYB . sent RCURLYB

    LCURLYB  shift, and go to state 16
    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    DO       shift, and go to state 19
    SWITCH   shift, and go to state 20
    BREAK    shift, and go to state 21
    PRINT    shift, and go to state 22
    ID       shift, and go to state 23
    RETURN   shift, and go to state 24
    FOR      shift, and go to state 25

    sent       go to state 32
    parte_izq  go to state 27
    var_arr    go to state 28


State 17

   21 sent: IF . LPAR cond RPAR sent
   22     | IF . LPAR cond RPAR sent ELSE sent

    LPAR  shift, and go to state 33


State 18

   23 sent: WHILE . LPAR cond RPAR sent

    LPAR  shift, and go to state 34


State 19

   24 sent: DO . sent WHILE LPAR cond RPAR SEMICOLON

    LCURLYB  shift, and go to state 16
    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    DO       shift, and go to state 19
    SWITCH   shift, and go to state 20
    BREAK    shift, and go to state 21
    PRINT    shift, and go to state 22
    ID       shift, and go to state 23
    RETURN   shift, and go to state 24
    FOR      shift, and go to state 25

    sent       go to state 35
    parte_izq  go to state 27
    var_arr    go to state 28


State 20

   30 sent: SWITCH . LPAR exp RPAR LCURLYB casos RCURLYB

    LPAR  shift, and go to state 36


State 21

   31 sent: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 37


State 22

   32 sent: PRINT . exp SEMICOLON

    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 46


State 23

   36 parte_izq: ID .
   38          | ID . DOT ID
   39 var_arr: ID . LBRACKET exp RBRACKET

    LBRACKET  shift, and go to state 47
    DOT       shift, and go to state 48

    $default  reduce using rule 36 (parte_izq)


State 24

   27 sent: RETURN . exp SEMICOLON
   28     | RETURN . SEMICOLON

    SEMICOLON  shift, and go to state 49
    ID         shift, and go to state 38
    INT        shift, and go to state 39
    DOUBLE     shift, and go to state 40
    FLOAT      shift, and go to state 41
    CADENA     shift, and go to state 42
    CARACTER   shift, and go to state 43

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 50


State 25

   25 sent: FOR . LPAR sent SEMICOLON cond SEMICOLON sent RPAR sent

    LPAR  shift, and go to state 51


State 26

    3 prog: $@1 decls $@2 sent .

    $default  reduce using rule 3 (prog)


State 27

   26 sent: parte_izq . ASSIG exp SEMICOLON

    ASSIG  shift, and go to state 52


State 28

   37 parte_izq: var_arr .
   40 var_arr: var_arr . LBRACKET exp RBRACKET

    LBRACKET  shift, and go to state 53

    $default  reduce using rule 37 (parte_izq)


State 29

   15 lista: ID . arreglo

    LBRACKET  shift, and go to state 54

    $default  reduce using rule 20 (arreglo)

    arreglo  go to state 55


State 30

    5 decls: tipo $@3 lista . SEMICOLON decls
   14 lista: lista . COMMA ID arreglo

    SEMICOLON  shift, and go to state 56
    COMMA      shift, and go to state 57


State 31

   13 tipo: STRUCT LCURLYB $@4 decls . RCURLYB

    RCURLYB  shift, and go to state 58


State 32

   29 sent: LCURLYB sent . RCURLYB

    RCURLYB  shift, and go to state 59


State 33

   21 sent: IF LPAR . cond RPAR sent
   22     | IF LPAR . cond RPAR sent ELSE sent

    TRUE      shift, and go to state 60
    FALSE     shift, and go to state 61
    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43
    NOT       shift, and go to state 62
    LPAR      shift, and go to state 63

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 64
    cond     go to state 65


State 34

   23 sent: WHILE LPAR . cond RPAR sent

    TRUE      shift, and go to state 60
    FALSE     shift, and go to state 61
    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43
    NOT       shift, and go to state 62
    LPAR      shift, and go to state 63

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 64
    cond     go to state 66


State 35

   24 sent: DO sent . WHILE LPAR cond RPAR SEMICOLON

    WHILE  shift, and go to state 67


State 36

   30 sent: SWITCH LPAR . exp RPAR LCURLYB casos RCURLYB

    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 68


State 37

   31 sent: BREAK SEMICOLON .

    $default  reduce using rule 31 (sent)


State 38

   39 var_arr: ID . LBRACKET exp RBRACKET
   47 exp: ID .
   51    | ID . LPAR params RPAR

    LBRACKET  shift, and go to state 47
    LPAR      shift, and go to state 69

    $default  reduce using rule 47 (exp)


State 39

   16 numero: INT .

    $default  reduce using rule 16 (numero)


State 40

   17 numero: DOUBLE .

    $default  reduce using rule 17 (numero)


State 41

   18 numero: FLOAT .

    $default  reduce using rule 18 (numero)


State 42

   48 exp: CADENA .

    $default  reduce using rule 48 (exp)


State 43

   50 exp: CARACTER .

    $default  reduce using rule 50 (exp)


State 44

   49 exp: numero .

    $default  reduce using rule 49 (exp)


State 45

   40 var_arr: var_arr . LBRACKET exp RBRACKET
   46 exp: var_arr .

    LBRACKET  shift, and go to state 53

    $default  reduce using rule 46 (exp)


State 46

   32 sent: PRINT exp . SEMICOLON
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . PROD exp
   44    | exp . DIV exp
   45    | exp . MOD exp

    SEMICOLON  shift, and go to state 70
    PLUS       shift, and go to state 71
    MINUS      shift, and go to state 72
    PROD       shift, and go to state 73
    DIV        shift, and go to state 74
    MOD        shift, and go to state 75


State 47

   39 var_arr: ID LBRACKET . exp RBRACKET

    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 76


State 48

   38 parte_izq: ID DOT . ID

    ID  shift, and go to state 77


State 49

   28 sent: RETURN SEMICOLON .

    $default  reduce using rule 28 (sent)


State 50

   27 sent: RETURN exp . SEMICOLON
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . PROD exp
   44    | exp . DIV exp
   45    | exp . MOD exp

    SEMICOLON  shift, and go to state 78
    PLUS       shift, and go to state 71
    MINUS      shift, and go to state 72
    PROD       shift, and go to state 73
    DIV        shift, and go to state 74
    MOD        shift, and go to state 75


State 51

   25 sent: FOR LPAR . sent SEMICOLON cond SEMICOLON sent RPAR sent

    LCURLYB  shift, and go to state 16
    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    DO       shift, and go to state 19
    SWITCH   shift, and go to state 20
    BREAK    shift, and go to state 21
    PRINT    shift, and go to state 22
    ID       shift, and go to state 23
    RETURN   shift, and go to state 24
    FOR      shift, and go to state 25

    sent       go to state 79
    parte_izq  go to state 27
    var_arr    go to state 28


State 52

   26 sent: parte_izq ASSIG . exp SEMICOLON

    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 80


State 53

   40 var_arr: var_arr LBRACKET . exp RBRACKET

    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 81


State 54

   19 arreglo: LBRACKET . numero RBRACKET arreglo

    INT     shift, and go to state 39
    DOUBLE  shift, and go to state 40
    FLOAT   shift, and go to state 41

    numero  go to state 82


State 55

   15 lista: ID arreglo .

    $default  reduce using rule 15 (lista)


State 56

    5 decls: tipo $@3 lista SEMICOLON . decls

    INTTYPE     shift, and go to state 4
    FLOATTYPE   shift, and go to state 5
    DOUBLETYPE  shift, and go to state 6
    CHARTYPE    shift, and go to state 7
    VOID        shift, and go to state 8
    STRUCT      shift, and go to state 9

    $default  reduce using rule 6 (decls)

    decls  go to state 83
    tipo   go to state 11


State 57

   14 lista: lista COMMA . ID arreglo

    ID  shift, and go to state 84


State 58

   13 tipo: STRUCT LCURLYB $@4 decls RCURLYB .

    $default  reduce using rule 13 (tipo)


State 59

   29 sent: LCURLYB sent RCURLYB .

    $default  reduce using rule 29 (sent)


State 60

   63 cond: TRUE .

    $default  reduce using rule 63 (cond)


State 61

   64 cond: FALSE .

    $default  reduce using rule 64 (cond)


State 62

   60 cond: NOT . cond

    TRUE      shift, and go to state 60
    FALSE     shift, and go to state 61
    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43
    NOT       shift, and go to state 62
    LPAR      shift, and go to state 63

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 64
    cond     go to state 85


State 63

   61 cond: LPAR . cond RPAR

    TRUE      shift, and go to state 60
    FALSE     shift, and go to state 61
    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43
    NOT       shift, and go to state 62
    LPAR      shift, and go to state 63

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 64
    cond     go to state 86


State 64

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . PROD exp
   44    | exp . DIV exp
   45    | exp . MOD exp
   62 cond: exp . rel exp

    EQ     shift, and go to state 87
    NEQ    shift, and go to state 88
    GT     shift, and go to state 89
    GEQ    shift, and go to state 90
    LT     shift, and go to state 91
    LEQ    shift, and go to state 92
    PLUS   shift, and go to state 71
    MINUS  shift, and go to state 72
    PROD   shift, and go to state 73
    DIV    shift, and go to state 74
    MOD    shift, and go to state 75

    rel  go to state 93


State 65

   21 sent: IF LPAR cond . RPAR sent
   22     | IF LPAR cond . RPAR sent ELSE sent
   57 cond: cond . OR $@5 cond
   59     | cond . AND $@6 cond

    OR    shift, and go to state 94
    AND   shift, and go to state 95
    RPAR  shift, and go to state 96


State 66

   23 sent: WHILE LPAR cond . RPAR sent
   57 cond: cond . OR $@5 cond
   59     | cond . AND $@6 cond

    OR    shift, and go to state 94
    AND   shift, and go to state 95
    RPAR  shift, and go to state 97


State 67

   24 sent: DO sent WHILE . LPAR cond RPAR SEMICOLON

    LPAR  shift, and go to state 98


State 68

   30 sent: SWITCH LPAR exp . RPAR LCURLYB casos RCURLYB
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . PROD exp
   44    | exp . DIV exp
   45    | exp . MOD exp

    PLUS   shift, and go to state 71
    MINUS  shift, and go to state 72
    PROD   shift, and go to state 73
    DIV    shift, and go to state 74
    MOD    shift, and go to state 75
    RPAR   shift, and go to state 99


State 69

   51 exp: ID LPAR . params RPAR

    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43

    $default  reduce using rule 53 (params)

    numero       go to state 44
    var_arr      go to state 45
    exp          go to state 100
    params       go to state 101
    lista_param  go to state 102


State 70

   32 sent: PRINT exp SEMICOLON .

    $default  reduce using rule 32 (sent)


State 71

   41 exp: exp PLUS . exp

    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 103


State 72

   42 exp: exp MINUS . exp

    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 104


State 73

   43 exp: exp PROD . exp

    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 105


State 74

   44 exp: exp DIV . exp

    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 106


State 75

   45 exp: exp MOD . exp

    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 107


State 76

   39 var_arr: ID LBRACKET exp . RBRACKET
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . PROD exp
   44    | exp . DIV exp
   45    | exp . MOD exp

    RBRACKET  shift, and go to state 108
    PLUS      shift, and go to state 71
    MINUS     shift, and go to state 72
    PROD      shift, and go to state 73
    DIV       shift, and go to state 74
    MOD       shift, and go to state 75


State 77

   38 parte_izq: ID DOT ID .

    $default  reduce using rule 38 (parte_izq)


State 78

   27 sent: RETURN exp SEMICOLON .

    $default  reduce using rule 27 (sent)


State 79

   25 sent: FOR LPAR sent . SEMICOLON cond SEMICOLON sent RPAR sent

    SEMICOLON  shift, and go to state 109


State 80

   26 sent: parte_izq ASSIG exp . SEMICOLON
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . PROD exp
   44    | exp . DIV exp
   45    | exp . MOD exp

    SEMICOLON  shift, and go to state 110
    PLUS       shift, and go to state 71
    MINUS      shift, and go to state 72
    PROD       shift, and go to state 73
    DIV        shift, and go to state 74
    MOD        shift, and go to state 75


State 81

   40 var_arr: var_arr LBRACKET exp . RBRACKET
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . PROD exp
   44    | exp . DIV exp
   45    | exp . MOD exp

    RBRACKET  shift, and go to state 111
    PLUS      shift, and go to state 71
    MINUS     shift, and go to state 72
    PROD      shift, and go to state 73
    DIV       shift, and go to state 74
    MOD       shift, and go to state 75


State 82

   19 arreglo: LBRACKET numero . RBRACKET arreglo

    RBRACKET  shift, and go to state 112


State 83

    5 decls: tipo $@3 lista SEMICOLON decls .

    $default  reduce using rule 5 (decls)


State 84

   14 lista: lista COMMA ID . arreglo

    LBRACKET  shift, and go to state 54

    $default  reduce using rule 20 (arreglo)

    arreglo  go to state 113


State 85

   57 cond: cond . OR $@5 cond
   59     | cond . AND $@6 cond
   60     | NOT cond .

    $default  reduce using rule 60 (cond)


State 86

   57 cond: cond . OR $@5 cond
   59     | cond . AND $@6 cond
   61     | LPAR cond . RPAR

    OR    shift, and go to state 94
    AND   shift, and go to state 95
    RPAR  shift, and go to state 114


State 87

   70 rel: EQ .

    $default  reduce using rule 70 (rel)


State 88

   69 rel: NEQ .

    $default  reduce using rule 69 (rel)


State 89

   66 rel: GT .

    $default  reduce using rule 66 (rel)


State 90

   68 rel: GEQ .

    $default  reduce using rule 68 (rel)


State 91

   65 rel: LT .

    $default  reduce using rule 65 (rel)


State 92

   67 rel: LEQ .

    $default  reduce using rule 67 (rel)


State 93

   62 cond: exp rel . exp

    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 115


State 94

   57 cond: cond OR . $@5 cond

    $default  reduce using rule 56 ($@5)

    $@5  go to state 116


State 95

   59 cond: cond AND . $@6 cond

    $default  reduce using rule 58 ($@6)

    $@6  go to state 117


State 96

   21 sent: IF LPAR cond RPAR . sent
   22     | IF LPAR cond RPAR . sent ELSE sent

    LCURLYB  shift, and go to state 16
    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    DO       shift, and go to state 19
    SWITCH   shift, and go to state 20
    BREAK    shift, and go to state 21
    PRINT    shift, and go to state 22
    ID       shift, and go to state 23
    RETURN   shift, and go to state 24
    FOR      shift, and go to state 25

    sent       go to state 118
    parte_izq  go to state 27
    var_arr    go to state 28


State 97

   23 sent: WHILE LPAR cond RPAR . sent

    LCURLYB  shift, and go to state 16
    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    DO       shift, and go to state 19
    SWITCH   shift, and go to state 20
    BREAK    shift, and go to state 21
    PRINT    shift, and go to state 22
    ID       shift, and go to state 23
    RETURN   shift, and go to state 24
    FOR      shift, and go to state 25

    sent       go to state 119
    parte_izq  go to state 27
    var_arr    go to state 28


State 98

   24 sent: DO sent WHILE LPAR . cond RPAR SEMICOLON

    TRUE      shift, and go to state 60
    FALSE     shift, and go to state 61
    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43
    NOT       shift, and go to state 62
    LPAR      shift, and go to state 63

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 64
    cond     go to state 120


State 99

   30 sent: SWITCH LPAR exp RPAR . LCURLYB casos RCURLYB

    LCURLYB  shift, and go to state 121


State 100

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . PROD exp
   44    | exp . DIV exp
   45    | exp . MOD exp
   55 lista_param: exp .

    PLUS   shift, and go to state 71
    MINUS  shift, and go to state 72
    PROD   shift, and go to state 73
    DIV    shift, and go to state 74
    MOD    shift, and go to state 75

    $default  reduce using rule 55 (lista_param)


State 101

   51 exp: ID LPAR params . RPAR

    RPAR  shift, and go to state 122


State 102

   52 params: lista_param .
   54 lista_param: lista_param . COMMA exp

    COMMA  shift, and go to state 123

    $default  reduce using rule 52 (params)


State 103

   41 exp: exp . PLUS exp
   41    | exp PLUS exp .
   42    | exp . MINUS exp
   43    | exp . PROD exp
   44    | exp . DIV exp
   45    | exp . MOD exp

    PROD  shift, and go to state 73
    DIV   shift, and go to state 74
    MOD   shift, and go to state 75

    $default  reduce using rule 41 (exp)


State 104

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   42    | exp MINUS exp .
   43    | exp . PROD exp
   44    | exp . DIV exp
   45    | exp . MOD exp

    PROD  shift, and go to state 73
    DIV   shift, and go to state 74
    MOD   shift, and go to state 75

    $default  reduce using rule 42 (exp)


State 105

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . PROD exp
   43    | exp PROD exp .
   44    | exp . DIV exp
   45    | exp . MOD exp

    $default  reduce using rule 43 (exp)


State 106

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . PROD exp
   44    | exp . DIV exp
   44    | exp DIV exp .
   45    | exp . MOD exp

    $default  reduce using rule 44 (exp)


State 107

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . PROD exp
   44    | exp . DIV exp
   45    | exp . MOD exp
   45    | exp MOD exp .

    $default  reduce using rule 45 (exp)


State 108

   39 var_arr: ID LBRACKET exp RBRACKET .

    $default  reduce using rule 39 (var_arr)


State 109

   25 sent: FOR LPAR sent SEMICOLON . cond SEMICOLON sent RPAR sent

    TRUE      shift, and go to state 60
    FALSE     shift, and go to state 61
    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43
    NOT       shift, and go to state 62
    LPAR      shift, and go to state 63

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 64
    cond     go to state 124


State 110

   26 sent: parte_izq ASSIG exp SEMICOLON .

    $default  reduce using rule 26 (sent)


State 111

   40 var_arr: var_arr LBRACKET exp RBRACKET .

    $default  reduce using rule 40 (var_arr)


State 112

   19 arreglo: LBRACKET numero RBRACKET . arreglo

    LBRACKET  shift, and go to state 54

    $default  reduce using rule 20 (arreglo)

    arreglo  go to state 125


State 113

   14 lista: lista COMMA ID arreglo .

    $default  reduce using rule 14 (lista)


State 114

   61 cond: LPAR cond RPAR .

    $default  reduce using rule 61 (cond)


State 115

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . PROD exp
   44    | exp . DIV exp
   45    | exp . MOD exp
   62 cond: exp rel exp .

    PLUS   shift, and go to state 71
    MINUS  shift, and go to state 72
    PROD   shift, and go to state 73
    DIV    shift, and go to state 74
    MOD    shift, and go to state 75

    $default  reduce using rule 62 (cond)


State 116

   57 cond: cond OR $@5 . cond

    TRUE      shift, and go to state 60
    FALSE     shift, and go to state 61
    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43
    NOT       shift, and go to state 62
    LPAR      shift, and go to state 63

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 64
    cond     go to state 126


State 117

   59 cond: cond AND $@6 . cond

    TRUE      shift, and go to state 60
    FALSE     shift, and go to state 61
    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43
    NOT       shift, and go to state 62
    LPAR      shift, and go to state 63

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 64
    cond     go to state 127


State 118

   21 sent: IF LPAR cond RPAR sent .
   22     | IF LPAR cond RPAR sent . ELSE sent

    ELSE  shift, and go to state 128

    $default  reduce using rule 21 (sent)


State 119

   23 sent: WHILE LPAR cond RPAR sent .

    $default  reduce using rule 23 (sent)


State 120

   24 sent: DO sent WHILE LPAR cond . RPAR SEMICOLON
   57 cond: cond . OR $@5 cond
   59     | cond . AND $@6 cond

    OR    shift, and go to state 94
    AND   shift, and go to state 95
    RPAR  shift, and go to state 129


State 121

   30 sent: SWITCH LPAR exp RPAR LCURLYB . casos RCURLYB

    CASE     shift, and go to state 130
    DEFAULT  shift, and go to state 131

    $default  reduce using rule 35 (casos)

    casos  go to state 132


State 122

   51 exp: ID LPAR params RPAR .

    $default  reduce using rule 51 (exp)


State 123

   54 lista_param: lista_param COMMA . exp

    ID        shift, and go to state 38
    INT       shift, and go to state 39
    DOUBLE    shift, and go to state 40
    FLOAT     shift, and go to state 41
    CADENA    shift, and go to state 42
    CARACTER  shift, and go to state 43

    numero   go to state 44
    var_arr  go to state 45
    exp      go to state 133


State 124

   25 sent: FOR LPAR sent SEMICOLON cond . SEMICOLON sent RPAR sent
   57 cond: cond . OR $@5 cond
   59     | cond . AND $@6 cond

    SEMICOLON  shift, and go to state 134
    OR         shift, and go to state 94
    AND        shift, and go to state 95


State 125

   19 arreglo: LBRACKET numero RBRACKET arreglo .

    $default  reduce using rule 19 (arreglo)


State 126

   57 cond: cond . OR $@5 cond
   57     | cond OR $@5 cond .
   59     | cond . AND $@6 cond

    AND  shift, and go to state 95

    $default  reduce using rule 57 (cond)


State 127

   57 cond: cond . OR $@5 cond
   59     | cond . AND $@6 cond
   59     | cond AND $@6 cond .

    $default  reduce using rule 59 (cond)


State 128

   22 sent: IF LPAR cond RPAR sent ELSE . sent

    LCURLYB  shift, and go to state 16
    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    DO       shift, and go to state 19
    SWITCH   shift, and go to state 20
    BREAK    shift, and go to state 21
    PRINT    shift, and go to state 22
    ID       shift, and go to state 23
    RETURN   shift, and go to state 24
    FOR      shift, and go to state 25

    sent       go to state 135
    parte_izq  go to state 27
    var_arr    go to state 28


State 129

   24 sent: DO sent WHILE LPAR cond RPAR . SEMICOLON

    SEMICOLON  shift, and go to state 136


State 130

   33 casos: CASE . numero sent casos

    INT     shift, and go to state 39
    DOUBLE  shift, and go to state 40
    FLOAT   shift, and go to state 41

    numero  go to state 137


State 131

   34 casos: DEFAULT . sent

    LCURLYB  shift, and go to state 16
    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    DO       shift, and go to state 19
    SWITCH   shift, and go to state 20
    BREAK    shift, and go to state 21
    PRINT    shift, and go to state 22
    ID       shift, and go to state 23
    RETURN   shift, and go to state 24
    FOR      shift, and go to state 25

    sent       go to state 138
    parte_izq  go to state 27
    var_arr    go to state 28


State 132

   30 sent: SWITCH LPAR exp RPAR LCURLYB casos . RCURLYB

    RCURLYB  shift, and go to state 139


State 133

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . PROD exp
   44    | exp . DIV exp
   45    | exp . MOD exp
   54 lista_param: lista_param COMMA exp .

    PLUS   shift, and go to state 71
    MINUS  shift, and go to state 72
    PROD   shift, and go to state 73
    DIV    shift, and go to state 74
    MOD    shift, and go to state 75

    $default  reduce using rule 54 (lista_param)


State 134

   25 sent: FOR LPAR sent SEMICOLON cond SEMICOLON . sent RPAR sent

    LCURLYB  shift, and go to state 16
    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    DO       shift, and go to state 19
    SWITCH   shift, and go to state 20
    BREAK    shift, and go to state 21
    PRINT    shift, and go to state 22
    ID       shift, and go to state 23
    RETURN   shift, and go to state 24
    FOR      shift, and go to state 25

    sent       go to state 140
    parte_izq  go to state 27
    var_arr    go to state 28


State 135

   22 sent: IF LPAR cond RPAR sent ELSE sent .

    $default  reduce using rule 22 (sent)


State 136

   24 sent: DO sent WHILE LPAR cond RPAR SEMICOLON .

    $default  reduce using rule 24 (sent)


State 137

   33 casos: CASE numero . sent casos

    LCURLYB  shift, and go to state 16
    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    DO       shift, and go to state 19
    SWITCH   shift, and go to state 20
    BREAK    shift, and go to state 21
    PRINT    shift, and go to state 22
    ID       shift, and go to state 23
    RETURN   shift, and go to state 24
    FOR      shift, and go to state 25

    sent       go to state 141
    parte_izq  go to state 27
    var_arr    go to state 28


State 138

   34 casos: DEFAULT sent .

    $default  reduce using rule 34 (casos)


State 139

   30 sent: SWITCH LPAR exp RPAR LCURLYB casos RCURLYB .

    $default  reduce using rule 30 (sent)


State 140

   25 sent: FOR LPAR sent SEMICOLON cond SEMICOLON sent . RPAR sent

    RPAR  shift, and go to state 142


State 141

   33 casos: CASE numero sent . casos

    CASE     shift, and go to state 130
    DEFAULT  shift, and go to state 131

    $default  reduce using rule 35 (casos)

    casos  go to state 143


State 142

   25 sent: FOR LPAR sent SEMICOLON cond SEMICOLON sent RPAR . sent

    LCURLYB  shift, and go to state 16
    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    DO       shift, and go to state 19
    SWITCH   shift, and go to state 20
    BREAK    shift, and go to state 21
    PRINT    shift, and go to state 22
    ID       shift, and go to state 23
    RETURN   shift, and go to state 24
    FOR      shift, and go to state 25

    sent       go to state 144
    parte_izq  go to state 27
    var_arr    go to state 28


State 143

   33 casos: CASE numero sent casos .

    $default  reduce using rule 33 (casos)


State 144

   25 sent: FOR LPAR sent SEMICOLON cond SEMICOLON sent RPAR sent .

    $default  reduce using rule 25 (sent)
