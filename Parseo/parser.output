Terminals unused in grammar

   END


Grammar

    0 $accept: prog $end

    1 prog: decls funcs

    2 decls: tipo lista SEMICOLON decls
    3      | %empty

    4 tipo: INTTYPE
    5     | FLOATTYPE
    6     | DOUBLETYPE
    7     | CHARTYPE
    8     | VOID
    9     | STRUCT LCURLYB decls RCURLYB

   10 lista: lista COMMA ID arreglo
   11      | ID arreglo

   12 numero: INT
   13       | DOUBLE
   14       | FLOAT

   15 arreglo: LBRACKET numero RBRACKET arreglo
   16        | %empty

   17 funcs: FUNC tipo ID LPAR args RPAR LCURLYB decls sents RCURLYB funcs
   18      | %empty

   19 args: lista_args
   20     | %empty

   21 lista_args: lista_args COMMA tipo ID parte_arr
   22           | tipo ID parte_arr

   23 parte_arr: LBRACKET RBRACKET parte_arr
   24          | %empty

   25 sents: sents sent
   26      | sent

   27 sent: IF LPAR cond RPAR sent sentp
   28     | WHILE LPAR cond RPAR sent
   29     | DO sent WHILE LPAR cond RPAR SEMICOLON
   30     | FOR LPAR sent SEMICOLON cond SEMICOLON sent RPAR sent
   31     | parte_izq ASSIG exp SEMICOLON
   32     | RETURN exp SEMICOLON
   33     | RETURN SEMICOLON
   34     | LCURLYB sents RCURLYB
   35     | SWITCH LPAR exp RPAR LCURLYB casos RCURLYB
   36     | BREAK SEMICOLON
   37     | PRINT exp SEMICOLON

   38 sentp: %empty
   39      | ELSE sent

   40 casos: CASE numero sent casos
   41      | DEFAULT sent
   42      | %empty

   43 parte_izq: ID
   44          | var_arr
   45          | ID DOT ID

   46 var_arr: ID LBRACKET exp RBRACKET
   47        | var_arr LBRACKET exp RBRACKET

   48 exp: exp PLUS exp
   49    | exp MINUS exp
   50    | exp PROD exp
   51    | exp DIV exp
   52    | exp MOD exp
   53    | var_arr
   54    | CADENA
   55    | numero
   56    | CARACTER
   57    | ID LPAR params RPAR

   58 params: lista_param
   59       | %empty

   60 lista_param: lista_param COMMA exp
   61            | exp

   62 cond: cond OR cond
   63     | cond AND cond
   64     | NOT cond
   65     | LPAR cond RPAR
   66     | exp rel exp
   67     | TRUE
   68     | FALSE

   69 rel: LT
   70    | GT
   71    | LEQ
   72    | GEQ
   73    | NEQ
   74    | EQ


Terminals, with rules where they appear

$end (0) 0
error (256)
END (258)
INTTYPE (259) 4
FLOATTYPE (260) 5
DOUBLETYPE (261) 6
CHARTYPE (262) 7
FUNC (263) 17
VOID (264) 8
STRUCT (265) 9
LCURLYB (266) 9 17 34 35
RCURLYB (267) 9 17 34 35
LBRACKET (268) 15 23 46 47
RBRACKET (269) 15 23 46 47
SEMICOLON (270) 2 29 30 31 32 33 36 37
DOT (271) 45
TRUE (272) 67
FALSE (273) 68
IF (274) 27
ELSE (275) 39
WHILE (276) 28 29
DO (277) 29
SWITCH (278) 35
CASE (279) 40
DEFAULT (280) 41
BREAK (281) 36
PRINT (282) 37
ID (283) 10 11 17 21 22 43 45 46 57
INT (284) 12
DOUBLE (285) 13
FLOAT (286) 14
CADENA (287) 54
CARACTER (288) 56
COMMA (289) 10 21 60
RETURN (290) 32 33
FOR (291) 30
ASSIG (292) 31
OR (293) 62
AND (294) 63
EQ (295) 74
NEQ (296) 73
GT (297) 70
GEQ (298) 72
LT (299) 69
LEQ (300) 71
PLUS (301) 48
MINUS (302) 49
PROD (303) 50
DIV (304) 51
MOD (305) 52
NOT (306) 64
LPAR (307) 17 27 28 29 30 35 57 65
RPAR (308) 17 27 28 29 30 35 57 65
IFX (309)


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
prog (56)
    on left: 1, on right: 0
decls (57)
    on left: 2 3, on right: 1 2 9 17
tipo (58)
    on left: 4 5 6 7 8 9, on right: 2 17 21 22
lista (59)
    on left: 10 11, on right: 2 10
numero (60)
    on left: 12 13 14, on right: 15 40 55
arreglo (61)
    on left: 15 16, on right: 10 11 15
funcs (62)
    on left: 17 18, on right: 1 17
args (63)
    on left: 19 20, on right: 17
lista_args (64)
    on left: 21 22, on right: 19 21
parte_arr (65)
    on left: 23 24, on right: 21 22 23
sents (66)
    on left: 25 26, on right: 17 25 34
sent (67)
    on left: 27 28 29 30 31 32 33 34 35 36 37, on right: 25 26 27 28
    29 30 39 40 41
sentp (68)
    on left: 38 39, on right: 27
casos (69)
    on left: 40 41 42, on right: 35 40
parte_izq (70)
    on left: 43 44 45, on right: 31
var_arr (71)
    on left: 46 47, on right: 44 47 53
exp (72)
    on left: 48 49 50 51 52 53 54 55 56 57, on right: 31 32 35 37 46
    47 48 49 50 51 52 60 61 66
params (73)
    on left: 58 59, on right: 57
lista_param (74)
    on left: 60 61, on right: 58 60
cond (75)
    on left: 62 63 64 65 66 67 68, on right: 27 28 29 30 62 63 64 65
rel (76)
    on left: 69 70 71 72 73 74, on right: 66


State 0

    0 $accept: . prog $end

    INTTYPE     shift, and go to state 1
    FLOATTYPE   shift, and go to state 2
    DOUBLETYPE  shift, and go to state 3
    CHARTYPE    shift, and go to state 4
    VOID        shift, and go to state 5
    STRUCT      shift, and go to state 6

    $default  reduce using rule 3 (decls)

    prog   go to state 7
    decls  go to state 8
    tipo   go to state 9


State 1

    4 tipo: INTTYPE .

    $default  reduce using rule 4 (tipo)


State 2

    5 tipo: FLOATTYPE .

    $default  reduce using rule 5 (tipo)


State 3

    6 tipo: DOUBLETYPE .

    $default  reduce using rule 6 (tipo)


State 4

    7 tipo: CHARTYPE .

    $default  reduce using rule 7 (tipo)


State 5

    8 tipo: VOID .

    $default  reduce using rule 8 (tipo)


State 6

    9 tipo: STRUCT . LCURLYB decls RCURLYB

    LCURLYB  shift, and go to state 10


State 7

    0 $accept: prog . $end

    $end  shift, and go to state 11


State 8

    1 prog: decls . funcs

    FUNC  shift, and go to state 12

    $default  reduce using rule 18 (funcs)

    funcs  go to state 13


State 9

    2 decls: tipo . lista SEMICOLON decls

    ID  shift, and go to state 14

    lista  go to state 15


State 10

    9 tipo: STRUCT LCURLYB . decls RCURLYB

    INTTYPE     shift, and go to state 1
    FLOATTYPE   shift, and go to state 2
    DOUBLETYPE  shift, and go to state 3
    CHARTYPE    shift, and go to state 4
    VOID        shift, and go to state 5
    STRUCT      shift, and go to state 6

    $default  reduce using rule 3 (decls)

    decls  go to state 16
    tipo   go to state 9


State 11

    0 $accept: prog $end .

    $default  accept


State 12

   17 funcs: FUNC . tipo ID LPAR args RPAR LCURLYB decls sents RCURLYB funcs

    INTTYPE     shift, and go to state 1
    FLOATTYPE   shift, and go to state 2
    DOUBLETYPE  shift, and go to state 3
    CHARTYPE    shift, and go to state 4
    VOID        shift, and go to state 5
    STRUCT      shift, and go to state 6

    tipo  go to state 17


State 13

    1 prog: decls funcs .

    $default  reduce using rule 1 (prog)


State 14

   11 lista: ID . arreglo

    LBRACKET  shift, and go to state 18

    $default  reduce using rule 16 (arreglo)

    arreglo  go to state 19


State 15

    2 decls: tipo lista . SEMICOLON decls
   10 lista: lista . COMMA ID arreglo

    SEMICOLON  shift, and go to state 20
    COMMA      shift, and go to state 21


State 16

    9 tipo: STRUCT LCURLYB decls . RCURLYB

    RCURLYB  shift, and go to state 22


State 17

   17 funcs: FUNC tipo . ID LPAR args RPAR LCURLYB decls sents RCURLYB funcs

    ID  shift, and go to state 23


State 18

   15 arreglo: LBRACKET . numero RBRACKET arreglo

    INT     shift, and go to state 24
    DOUBLE  shift, and go to state 25
    FLOAT   shift, and go to state 26

    numero  go to state 27


State 19

   11 lista: ID arreglo .

    $default  reduce using rule 11 (lista)


State 20

    2 decls: tipo lista SEMICOLON . decls

    INTTYPE     shift, and go to state 1
    FLOATTYPE   shift, and go to state 2
    DOUBLETYPE  shift, and go to state 3
    CHARTYPE    shift, and go to state 4
    VOID        shift, and go to state 5
    STRUCT      shift, and go to state 6

    $default  reduce using rule 3 (decls)

    decls  go to state 28
    tipo   go to state 9


State 21

   10 lista: lista COMMA . ID arreglo

    ID  shift, and go to state 29


State 22

    9 tipo: STRUCT LCURLYB decls RCURLYB .

    $default  reduce using rule 9 (tipo)


State 23

   17 funcs: FUNC tipo ID . LPAR args RPAR LCURLYB decls sents RCURLYB funcs

    LPAR  shift, and go to state 30


State 24

   12 numero: INT .

    $default  reduce using rule 12 (numero)


State 25

   13 numero: DOUBLE .

    $default  reduce using rule 13 (numero)


State 26

   14 numero: FLOAT .

    $default  reduce using rule 14 (numero)


State 27

   15 arreglo: LBRACKET numero . RBRACKET arreglo

    RBRACKET  shift, and go to state 31


State 28

    2 decls: tipo lista SEMICOLON decls .

    $default  reduce using rule 2 (decls)


State 29

   10 lista: lista COMMA ID . arreglo

    LBRACKET  shift, and go to state 18

    $default  reduce using rule 16 (arreglo)

    arreglo  go to state 32


State 30

   17 funcs: FUNC tipo ID LPAR . args RPAR LCURLYB decls sents RCURLYB funcs

    INTTYPE     shift, and go to state 1
    FLOATTYPE   shift, and go to state 2
    DOUBLETYPE  shift, and go to state 3
    CHARTYPE    shift, and go to state 4
    VOID        shift, and go to state 5
    STRUCT      shift, and go to state 6

    $default  reduce using rule 20 (args)

    tipo        go to state 33
    args        go to state 34
    lista_args  go to state 35


State 31

   15 arreglo: LBRACKET numero RBRACKET . arreglo

    LBRACKET  shift, and go to state 18

    $default  reduce using rule 16 (arreglo)

    arreglo  go to state 36


State 32

   10 lista: lista COMMA ID arreglo .

    $default  reduce using rule 10 (lista)


State 33

   22 lista_args: tipo . ID parte_arr

    ID  shift, and go to state 37


State 34

   17 funcs: FUNC tipo ID LPAR args . RPAR LCURLYB decls sents RCURLYB funcs

    RPAR  shift, and go to state 38


State 35

   19 args: lista_args .
   21 lista_args: lista_args . COMMA tipo ID parte_arr

    COMMA  shift, and go to state 39

    $default  reduce using rule 19 (args)


State 36

   15 arreglo: LBRACKET numero RBRACKET arreglo .

    $default  reduce using rule 15 (arreglo)


State 37

   22 lista_args: tipo ID . parte_arr

    LBRACKET  shift, and go to state 40

    $default  reduce using rule 24 (parte_arr)

    parte_arr  go to state 41


State 38

   17 funcs: FUNC tipo ID LPAR args RPAR . LCURLYB decls sents RCURLYB funcs

    LCURLYB  shift, and go to state 42


State 39

   21 lista_args: lista_args COMMA . tipo ID parte_arr

    INTTYPE     shift, and go to state 1
    FLOATTYPE   shift, and go to state 2
    DOUBLETYPE  shift, and go to state 3
    CHARTYPE    shift, and go to state 4
    VOID        shift, and go to state 5
    STRUCT      shift, and go to state 6

    tipo  go to state 43


State 40

   23 parte_arr: LBRACKET . RBRACKET parte_arr

    RBRACKET  shift, and go to state 44


State 41

   22 lista_args: tipo ID parte_arr .

    $default  reduce using rule 22 (lista_args)


State 42

   17 funcs: FUNC tipo ID LPAR args RPAR LCURLYB . decls sents RCURLYB funcs

    INTTYPE     shift, and go to state 1
    FLOATTYPE   shift, and go to state 2
    DOUBLETYPE  shift, and go to state 3
    CHARTYPE    shift, and go to state 4
    VOID        shift, and go to state 5
    STRUCT      shift, and go to state 6

    $default  reduce using rule 3 (decls)

    decls  go to state 45
    tipo   go to state 9


State 43

   21 lista_args: lista_args COMMA tipo . ID parte_arr

    ID  shift, and go to state 46


State 44

   23 parte_arr: LBRACKET RBRACKET . parte_arr

    LBRACKET  shift, and go to state 40

    $default  reduce using rule 24 (parte_arr)

    parte_arr  go to state 47


State 45

   17 funcs: FUNC tipo ID LPAR args RPAR LCURLYB decls . sents RCURLYB funcs

    LCURLYB  shift, and go to state 48
    IF       shift, and go to state 49
    WHILE    shift, and go to state 50
    DO       shift, and go to state 51
    SWITCH   shift, and go to state 52
    BREAK    shift, and go to state 53
    PRINT    shift, and go to state 54
    ID       shift, and go to state 55
    RETURN   shift, and go to state 56
    FOR      shift, and go to state 57

    sents      go to state 58
    sent       go to state 59
    parte_izq  go to state 60
    var_arr    go to state 61


State 46

   21 lista_args: lista_args COMMA tipo ID . parte_arr

    LBRACKET  shift, and go to state 40

    $default  reduce using rule 24 (parte_arr)

    parte_arr  go to state 62


State 47

   23 parte_arr: LBRACKET RBRACKET parte_arr .

    $default  reduce using rule 23 (parte_arr)


State 48

   34 sent: LCURLYB . sents RCURLYB

    LCURLYB  shift, and go to state 48
    IF       shift, and go to state 49
    WHILE    shift, and go to state 50
    DO       shift, and go to state 51
    SWITCH   shift, and go to state 52
    BREAK    shift, and go to state 53
    PRINT    shift, and go to state 54
    ID       shift, and go to state 55
    RETURN   shift, and go to state 56
    FOR      shift, and go to state 57

    sents      go to state 63
    sent       go to state 59
    parte_izq  go to state 60
    var_arr    go to state 61


State 49

   27 sent: IF . LPAR cond RPAR sent sentp

    LPAR  shift, and go to state 64


State 50

   28 sent: WHILE . LPAR cond RPAR sent

    LPAR  shift, and go to state 65


State 51

   29 sent: DO . sent WHILE LPAR cond RPAR SEMICOLON

    LCURLYB  shift, and go to state 48
    IF       shift, and go to state 49
    WHILE    shift, and go to state 50
    DO       shift, and go to state 51
    SWITCH   shift, and go to state 52
    BREAK    shift, and go to state 53
    PRINT    shift, and go to state 54
    ID       shift, and go to state 55
    RETURN   shift, and go to state 56
    FOR      shift, and go to state 57

    sent       go to state 66
    parte_izq  go to state 60
    var_arr    go to state 61


State 52

   35 sent: SWITCH . LPAR exp RPAR LCURLYB casos RCURLYB

    LPAR  shift, and go to state 67


State 53

   36 sent: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 68


State 54

   37 sent: PRINT . exp SEMICOLON

    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 74


State 55

   43 parte_izq: ID .
   45          | ID . DOT ID
   46 var_arr: ID . LBRACKET exp RBRACKET

    LBRACKET  shift, and go to state 75
    DOT       shift, and go to state 76

    $default  reduce using rule 43 (parte_izq)


State 56

   32 sent: RETURN . exp SEMICOLON
   33     | RETURN . SEMICOLON

    SEMICOLON  shift, and go to state 77
    ID         shift, and go to state 69
    INT        shift, and go to state 24
    DOUBLE     shift, and go to state 25
    FLOAT      shift, and go to state 26
    CADENA     shift, and go to state 70
    CARACTER   shift, and go to state 71

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 78


State 57

   30 sent: FOR . LPAR sent SEMICOLON cond SEMICOLON sent RPAR sent

    LPAR  shift, and go to state 79


State 58

   17 funcs: FUNC tipo ID LPAR args RPAR LCURLYB decls sents . RCURLYB funcs
   25 sents: sents . sent

    LCURLYB  shift, and go to state 48
    RCURLYB  shift, and go to state 80
    IF       shift, and go to state 49
    WHILE    shift, and go to state 50
    DO       shift, and go to state 51
    SWITCH   shift, and go to state 52
    BREAK    shift, and go to state 53
    PRINT    shift, and go to state 54
    ID       shift, and go to state 55
    RETURN   shift, and go to state 56
    FOR      shift, and go to state 57

    sent       go to state 81
    parte_izq  go to state 60
    var_arr    go to state 61


State 59

   26 sents: sent .

    $default  reduce using rule 26 (sents)


State 60

   31 sent: parte_izq . ASSIG exp SEMICOLON

    ASSIG  shift, and go to state 82


State 61

   44 parte_izq: var_arr .
   47 var_arr: var_arr . LBRACKET exp RBRACKET

    LBRACKET  shift, and go to state 83

    $default  reduce using rule 44 (parte_izq)


State 62

   21 lista_args: lista_args COMMA tipo ID parte_arr .

    $default  reduce using rule 21 (lista_args)


State 63

   25 sents: sents . sent
   34 sent: LCURLYB sents . RCURLYB

    LCURLYB  shift, and go to state 48
    RCURLYB  shift, and go to state 84
    IF       shift, and go to state 49
    WHILE    shift, and go to state 50
    DO       shift, and go to state 51
    SWITCH   shift, and go to state 52
    BREAK    shift, and go to state 53
    PRINT    shift, and go to state 54
    ID       shift, and go to state 55
    RETURN   shift, and go to state 56
    FOR      shift, and go to state 57

    sent       go to state 81
    parte_izq  go to state 60
    var_arr    go to state 61


State 64

   27 sent: IF LPAR . cond RPAR sent sentp

    TRUE      shift, and go to state 85
    FALSE     shift, and go to state 86
    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71
    NOT       shift, and go to state 87
    LPAR      shift, and go to state 88

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 89
    cond     go to state 90


State 65

   28 sent: WHILE LPAR . cond RPAR sent

    TRUE      shift, and go to state 85
    FALSE     shift, and go to state 86
    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71
    NOT       shift, and go to state 87
    LPAR      shift, and go to state 88

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 89
    cond     go to state 91


State 66

   29 sent: DO sent . WHILE LPAR cond RPAR SEMICOLON

    WHILE  shift, and go to state 92


State 67

   35 sent: SWITCH LPAR . exp RPAR LCURLYB casos RCURLYB

    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 93


State 68

   36 sent: BREAK SEMICOLON .

    $default  reduce using rule 36 (sent)


State 69

   46 var_arr: ID . LBRACKET exp RBRACKET
   57 exp: ID . LPAR params RPAR

    LBRACKET  shift, and go to state 75
    LPAR      shift, and go to state 94


State 70

   54 exp: CADENA .

    $default  reduce using rule 54 (exp)


State 71

   56 exp: CARACTER .

    $default  reduce using rule 56 (exp)


State 72

   55 exp: numero .

    $default  reduce using rule 55 (exp)


State 73

   47 var_arr: var_arr . LBRACKET exp RBRACKET
   53 exp: var_arr .

    LBRACKET  shift, and go to state 83

    $default  reduce using rule 53 (exp)


State 74

   37 sent: PRINT exp . SEMICOLON
   48 exp: exp . PLUS exp
   49    | exp . MINUS exp
   50    | exp . PROD exp
   51    | exp . DIV exp
   52    | exp . MOD exp

    SEMICOLON  shift, and go to state 95
    PLUS       shift, and go to state 96
    MINUS      shift, and go to state 97
    PROD       shift, and go to state 98
    DIV        shift, and go to state 99
    MOD        shift, and go to state 100


State 75

   46 var_arr: ID LBRACKET . exp RBRACKET

    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 101


State 76

   45 parte_izq: ID DOT . ID

    ID  shift, and go to state 102


State 77

   33 sent: RETURN SEMICOLON .

    $default  reduce using rule 33 (sent)


State 78

   32 sent: RETURN exp . SEMICOLON
   48 exp: exp . PLUS exp
   49    | exp . MINUS exp
   50    | exp . PROD exp
   51    | exp . DIV exp
   52    | exp . MOD exp

    SEMICOLON  shift, and go to state 103
    PLUS       shift, and go to state 96
    MINUS      shift, and go to state 97
    PROD       shift, and go to state 98
    DIV        shift, and go to state 99
    MOD        shift, and go to state 100


State 79

   30 sent: FOR LPAR . sent SEMICOLON cond SEMICOLON sent RPAR sent

    LCURLYB  shift, and go to state 48
    IF       shift, and go to state 49
    WHILE    shift, and go to state 50
    DO       shift, and go to state 51
    SWITCH   shift, and go to state 52
    BREAK    shift, and go to state 53
    PRINT    shift, and go to state 54
    ID       shift, and go to state 55
    RETURN   shift, and go to state 56
    FOR      shift, and go to state 57

    sent       go to state 104
    parte_izq  go to state 60
    var_arr    go to state 61


State 80

   17 funcs: FUNC tipo ID LPAR args RPAR LCURLYB decls sents RCURLYB . funcs

    FUNC  shift, and go to state 12

    $default  reduce using rule 18 (funcs)

    funcs  go to state 105


State 81

   25 sents: sents sent .

    $default  reduce using rule 25 (sents)


State 82

   31 sent: parte_izq ASSIG . exp SEMICOLON

    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 106


State 83

   47 var_arr: var_arr LBRACKET . exp RBRACKET

    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 107


State 84

   34 sent: LCURLYB sents RCURLYB .

    $default  reduce using rule 34 (sent)


State 85

   67 cond: TRUE .

    $default  reduce using rule 67 (cond)


State 86

   68 cond: FALSE .

    $default  reduce using rule 68 (cond)


State 87

   64 cond: NOT . cond

    TRUE      shift, and go to state 85
    FALSE     shift, and go to state 86
    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71
    NOT       shift, and go to state 87
    LPAR      shift, and go to state 88

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 89
    cond     go to state 108


State 88

   65 cond: LPAR . cond RPAR

    TRUE      shift, and go to state 85
    FALSE     shift, and go to state 86
    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71
    NOT       shift, and go to state 87
    LPAR      shift, and go to state 88

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 89
    cond     go to state 109


State 89

   48 exp: exp . PLUS exp
   49    | exp . MINUS exp
   50    | exp . PROD exp
   51    | exp . DIV exp
   52    | exp . MOD exp
   66 cond: exp . rel exp

    EQ     shift, and go to state 110
    NEQ    shift, and go to state 111
    GT     shift, and go to state 112
    GEQ    shift, and go to state 113
    LT     shift, and go to state 114
    LEQ    shift, and go to state 115
    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    PROD   shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100

    rel  go to state 116


State 90

   27 sent: IF LPAR cond . RPAR sent sentp
   62 cond: cond . OR cond
   63     | cond . AND cond

    OR    shift, and go to state 117
    AND   shift, and go to state 118
    RPAR  shift, and go to state 119


State 91

   28 sent: WHILE LPAR cond . RPAR sent
   62 cond: cond . OR cond
   63     | cond . AND cond

    OR    shift, and go to state 117
    AND   shift, and go to state 118
    RPAR  shift, and go to state 120


State 92

   29 sent: DO sent WHILE . LPAR cond RPAR SEMICOLON

    LPAR  shift, and go to state 121


State 93

   35 sent: SWITCH LPAR exp . RPAR LCURLYB casos RCURLYB
   48 exp: exp . PLUS exp
   49    | exp . MINUS exp
   50    | exp . PROD exp
   51    | exp . DIV exp
   52    | exp . MOD exp

    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    PROD   shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100
    RPAR   shift, and go to state 122


State 94

   57 exp: ID LPAR . params RPAR

    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71

    $default  reduce using rule 59 (params)

    numero       go to state 72
    var_arr      go to state 73
    exp          go to state 123
    params       go to state 124
    lista_param  go to state 125


State 95

   37 sent: PRINT exp SEMICOLON .

    $default  reduce using rule 37 (sent)


State 96

   48 exp: exp PLUS . exp

    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 126


State 97

   49 exp: exp MINUS . exp

    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 127


State 98

   50 exp: exp PROD . exp

    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 128


State 99

   51 exp: exp DIV . exp

    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 129


State 100

   52 exp: exp MOD . exp

    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 130


State 101

   46 var_arr: ID LBRACKET exp . RBRACKET
   48 exp: exp . PLUS exp
   49    | exp . MINUS exp
   50    | exp . PROD exp
   51    | exp . DIV exp
   52    | exp . MOD exp

    RBRACKET  shift, and go to state 131
    PLUS      shift, and go to state 96
    MINUS     shift, and go to state 97
    PROD      shift, and go to state 98
    DIV       shift, and go to state 99
    MOD       shift, and go to state 100


State 102

   45 parte_izq: ID DOT ID .

    $default  reduce using rule 45 (parte_izq)


State 103

   32 sent: RETURN exp SEMICOLON .

    $default  reduce using rule 32 (sent)


State 104

   30 sent: FOR LPAR sent . SEMICOLON cond SEMICOLON sent RPAR sent

    SEMICOLON  shift, and go to state 132


State 105

   17 funcs: FUNC tipo ID LPAR args RPAR LCURLYB decls sents RCURLYB funcs .

    $default  reduce using rule 17 (funcs)


State 106

   31 sent: parte_izq ASSIG exp . SEMICOLON
   48 exp: exp . PLUS exp
   49    | exp . MINUS exp
   50    | exp . PROD exp
   51    | exp . DIV exp
   52    | exp . MOD exp

    SEMICOLON  shift, and go to state 133
    PLUS       shift, and go to state 96
    MINUS      shift, and go to state 97
    PROD       shift, and go to state 98
    DIV        shift, and go to state 99
    MOD        shift, and go to state 100


State 107

   47 var_arr: var_arr LBRACKET exp . RBRACKET
   48 exp: exp . PLUS exp
   49    | exp . MINUS exp
   50    | exp . PROD exp
   51    | exp . DIV exp
   52    | exp . MOD exp

    RBRACKET  shift, and go to state 134
    PLUS      shift, and go to state 96
    MINUS     shift, and go to state 97
    PROD      shift, and go to state 98
    DIV       shift, and go to state 99
    MOD       shift, and go to state 100


State 108

   62 cond: cond . OR cond
   63     | cond . AND cond
   64     | NOT cond .

    $default  reduce using rule 64 (cond)


State 109

   62 cond: cond . OR cond
   63     | cond . AND cond
   65     | LPAR cond . RPAR

    OR    shift, and go to state 117
    AND   shift, and go to state 118
    RPAR  shift, and go to state 135


State 110

   74 rel: EQ .

    $default  reduce using rule 74 (rel)


State 111

   73 rel: NEQ .

    $default  reduce using rule 73 (rel)


State 112

   70 rel: GT .

    $default  reduce using rule 70 (rel)


State 113

   72 rel: GEQ .

    $default  reduce using rule 72 (rel)


State 114

   69 rel: LT .

    $default  reduce using rule 69 (rel)


State 115

   71 rel: LEQ .

    $default  reduce using rule 71 (rel)


State 116

   66 cond: exp rel . exp

    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 136


State 117

   62 cond: cond OR . cond

    TRUE      shift, and go to state 85
    FALSE     shift, and go to state 86
    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71
    NOT       shift, and go to state 87
    LPAR      shift, and go to state 88

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 89
    cond     go to state 137


State 118

   63 cond: cond AND . cond

    TRUE      shift, and go to state 85
    FALSE     shift, and go to state 86
    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71
    NOT       shift, and go to state 87
    LPAR      shift, and go to state 88

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 89
    cond     go to state 138


State 119

   27 sent: IF LPAR cond RPAR . sent sentp

    LCURLYB  shift, and go to state 48
    IF       shift, and go to state 49
    WHILE    shift, and go to state 50
    DO       shift, and go to state 51
    SWITCH   shift, and go to state 52
    BREAK    shift, and go to state 53
    PRINT    shift, and go to state 54
    ID       shift, and go to state 55
    RETURN   shift, and go to state 56
    FOR      shift, and go to state 57

    sent       go to state 139
    parte_izq  go to state 60
    var_arr    go to state 61


State 120

   28 sent: WHILE LPAR cond RPAR . sent

    LCURLYB  shift, and go to state 48
    IF       shift, and go to state 49
    WHILE    shift, and go to state 50
    DO       shift, and go to state 51
    SWITCH   shift, and go to state 52
    BREAK    shift, and go to state 53
    PRINT    shift, and go to state 54
    ID       shift, and go to state 55
    RETURN   shift, and go to state 56
    FOR      shift, and go to state 57

    sent       go to state 140
    parte_izq  go to state 60
    var_arr    go to state 61


State 121

   29 sent: DO sent WHILE LPAR . cond RPAR SEMICOLON

    TRUE      shift, and go to state 85
    FALSE     shift, and go to state 86
    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71
    NOT       shift, and go to state 87
    LPAR      shift, and go to state 88

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 89
    cond     go to state 141


State 122

   35 sent: SWITCH LPAR exp RPAR . LCURLYB casos RCURLYB

    LCURLYB  shift, and go to state 142


State 123

   48 exp: exp . PLUS exp
   49    | exp . MINUS exp
   50    | exp . PROD exp
   51    | exp . DIV exp
   52    | exp . MOD exp
   61 lista_param: exp .

    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    PROD   shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100

    $default  reduce using rule 61 (lista_param)


State 124

   57 exp: ID LPAR params . RPAR

    RPAR  shift, and go to state 143


State 125

   58 params: lista_param .
   60 lista_param: lista_param . COMMA exp

    COMMA  shift, and go to state 144

    $default  reduce using rule 58 (params)


State 126

   48 exp: exp . PLUS exp
   48    | exp PLUS exp .
   49    | exp . MINUS exp
   50    | exp . PROD exp
   51    | exp . DIV exp
   52    | exp . MOD exp

    PROD  shift, and go to state 98
    DIV   shift, and go to state 99
    MOD   shift, and go to state 100

    $default  reduce using rule 48 (exp)


State 127

   48 exp: exp . PLUS exp
   49    | exp . MINUS exp
   49    | exp MINUS exp .
   50    | exp . PROD exp
   51    | exp . DIV exp
   52    | exp . MOD exp

    PROD  shift, and go to state 98
    DIV   shift, and go to state 99
    MOD   shift, and go to state 100

    $default  reduce using rule 49 (exp)


State 128

   48 exp: exp . PLUS exp
   49    | exp . MINUS exp
   50    | exp . PROD exp
   50    | exp PROD exp .
   51    | exp . DIV exp
   52    | exp . MOD exp

    $default  reduce using rule 50 (exp)


State 129

   48 exp: exp . PLUS exp
   49    | exp . MINUS exp
   50    | exp . PROD exp
   51    | exp . DIV exp
   51    | exp DIV exp .
   52    | exp . MOD exp

    $default  reduce using rule 51 (exp)


State 130

   48 exp: exp . PLUS exp
   49    | exp . MINUS exp
   50    | exp . PROD exp
   51    | exp . DIV exp
   52    | exp . MOD exp
   52    | exp MOD exp .

    $default  reduce using rule 52 (exp)


State 131

   46 var_arr: ID LBRACKET exp RBRACKET .

    $default  reduce using rule 46 (var_arr)


State 132

   30 sent: FOR LPAR sent SEMICOLON . cond SEMICOLON sent RPAR sent

    TRUE      shift, and go to state 85
    FALSE     shift, and go to state 86
    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71
    NOT       shift, and go to state 87
    LPAR      shift, and go to state 88

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 89
    cond     go to state 145


State 133

   31 sent: parte_izq ASSIG exp SEMICOLON .

    $default  reduce using rule 31 (sent)


State 134

   47 var_arr: var_arr LBRACKET exp RBRACKET .

    $default  reduce using rule 47 (var_arr)


State 135

   65 cond: LPAR cond RPAR .

    $default  reduce using rule 65 (cond)


State 136

   48 exp: exp . PLUS exp
   49    | exp . MINUS exp
   50    | exp . PROD exp
   51    | exp . DIV exp
   52    | exp . MOD exp
   66 cond: exp rel exp .

    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    PROD   shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100

    $default  reduce using rule 66 (cond)


State 137

   62 cond: cond . OR cond
   62     | cond OR cond .
   63     | cond . AND cond

    AND  shift, and go to state 118

    $default  reduce using rule 62 (cond)


State 138

   62 cond: cond . OR cond
   63     | cond . AND cond
   63     | cond AND cond .

    $default  reduce using rule 63 (cond)


State 139

   27 sent: IF LPAR cond RPAR sent . sentp

    ELSE  shift, and go to state 146

    $default  reduce using rule 38 (sentp)

    sentp  go to state 147


State 140

   28 sent: WHILE LPAR cond RPAR sent .

    $default  reduce using rule 28 (sent)


State 141

   29 sent: DO sent WHILE LPAR cond . RPAR SEMICOLON
   62 cond: cond . OR cond
   63     | cond . AND cond

    OR    shift, and go to state 117
    AND   shift, and go to state 118
    RPAR  shift, and go to state 148


State 142

   35 sent: SWITCH LPAR exp RPAR LCURLYB . casos RCURLYB

    CASE     shift, and go to state 149
    DEFAULT  shift, and go to state 150

    $default  reduce using rule 42 (casos)

    casos  go to state 151


State 143

   57 exp: ID LPAR params RPAR .

    $default  reduce using rule 57 (exp)


State 144

   60 lista_param: lista_param COMMA . exp

    ID        shift, and go to state 69
    INT       shift, and go to state 24
    DOUBLE    shift, and go to state 25
    FLOAT     shift, and go to state 26
    CADENA    shift, and go to state 70
    CARACTER  shift, and go to state 71

    numero   go to state 72
    var_arr  go to state 73
    exp      go to state 152


State 145

   30 sent: FOR LPAR sent SEMICOLON cond . SEMICOLON sent RPAR sent
   62 cond: cond . OR cond
   63     | cond . AND cond

    SEMICOLON  shift, and go to state 153
    OR         shift, and go to state 117
    AND        shift, and go to state 118


State 146

   39 sentp: ELSE . sent

    LCURLYB  shift, and go to state 48
    IF       shift, and go to state 49
    WHILE    shift, and go to state 50
    DO       shift, and go to state 51
    SWITCH   shift, and go to state 52
    BREAK    shift, and go to state 53
    PRINT    shift, and go to state 54
    ID       shift, and go to state 55
    RETURN   shift, and go to state 56
    FOR      shift, and go to state 57

    sent       go to state 154
    parte_izq  go to state 60
    var_arr    go to state 61


State 147

   27 sent: IF LPAR cond RPAR sent sentp .

    $default  reduce using rule 27 (sent)


State 148

   29 sent: DO sent WHILE LPAR cond RPAR . SEMICOLON

    SEMICOLON  shift, and go to state 155


State 149

   40 casos: CASE . numero sent casos

    INT     shift, and go to state 24
    DOUBLE  shift, and go to state 25
    FLOAT   shift, and go to state 26

    numero  go to state 156


State 150

   41 casos: DEFAULT . sent

    LCURLYB  shift, and go to state 48
    IF       shift, and go to state 49
    WHILE    shift, and go to state 50
    DO       shift, and go to state 51
    SWITCH   shift, and go to state 52
    BREAK    shift, and go to state 53
    PRINT    shift, and go to state 54
    ID       shift, and go to state 55
    RETURN   shift, and go to state 56
    FOR      shift, and go to state 57

    sent       go to state 157
    parte_izq  go to state 60
    var_arr    go to state 61


State 151

   35 sent: SWITCH LPAR exp RPAR LCURLYB casos . RCURLYB

    RCURLYB  shift, and go to state 158


State 152

   48 exp: exp . PLUS exp
   49    | exp . MINUS exp
   50    | exp . PROD exp
   51    | exp . DIV exp
   52    | exp . MOD exp
   60 lista_param: lista_param COMMA exp .

    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    PROD   shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100

    $default  reduce using rule 60 (lista_param)


State 153

   30 sent: FOR LPAR sent SEMICOLON cond SEMICOLON . sent RPAR sent

    LCURLYB  shift, and go to state 48
    IF       shift, and go to state 49
    WHILE    shift, and go to state 50
    DO       shift, and go to state 51
    SWITCH   shift, and go to state 52
    BREAK    shift, and go to state 53
    PRINT    shift, and go to state 54
    ID       shift, and go to state 55
    RETURN   shift, and go to state 56
    FOR      shift, and go to state 57

    sent       go to state 159
    parte_izq  go to state 60
    var_arr    go to state 61


State 154

   39 sentp: ELSE sent .

    $default  reduce using rule 39 (sentp)


State 155

   29 sent: DO sent WHILE LPAR cond RPAR SEMICOLON .

    $default  reduce using rule 29 (sent)


State 156

   40 casos: CASE numero . sent casos

    LCURLYB  shift, and go to state 48
    IF       shift, and go to state 49
    WHILE    shift, and go to state 50
    DO       shift, and go to state 51
    SWITCH   shift, and go to state 52
    BREAK    shift, and go to state 53
    PRINT    shift, and go to state 54
    ID       shift, and go to state 55
    RETURN   shift, and go to state 56
    FOR      shift, and go to state 57

    sent       go to state 160
    parte_izq  go to state 60
    var_arr    go to state 61


State 157

   41 casos: DEFAULT sent .

    $default  reduce using rule 41 (casos)


State 158

   35 sent: SWITCH LPAR exp RPAR LCURLYB casos RCURLYB .

    $default  reduce using rule 35 (sent)


State 159

   30 sent: FOR LPAR sent SEMICOLON cond SEMICOLON sent . RPAR sent

    RPAR  shift, and go to state 161


State 160

   40 casos: CASE numero sent . casos

    CASE     shift, and go to state 149
    DEFAULT  shift, and go to state 150

    $default  reduce using rule 42 (casos)

    casos  go to state 162


State 161

   30 sent: FOR LPAR sent SEMICOLON cond SEMICOLON sent RPAR . sent

    LCURLYB  shift, and go to state 48
    IF       shift, and go to state 49
    WHILE    shift, and go to state 50
    DO       shift, and go to state 51
    SWITCH   shift, and go to state 52
    BREAK    shift, and go to state 53
    PRINT    shift, and go to state 54
    ID       shift, and go to state 55
    RETURN   shift, and go to state 56
    FOR      shift, and go to state 57

    sent       go to state 163
    parte_izq  go to state 60
    var_arr    go to state 61


State 162

   40 casos: CASE numero sent casos .

    $default  reduce using rule 40 (casos)


State 163

   30 sent: FOR LPAR sent SEMICOLON cond SEMICOLON sent RPAR sent .

    $default  reduce using rule 30 (sent)
