Terminals unused in grammar

   END


Grammar

    0 $accept: prog $end

    1 $@1: %empty

    2 prog: $@1 decls funcs

    3 $@2: %empty

    4 decls: tipo $@2 lista SEMICOLON decls
    5      | %empty

    6 tipo: INTTYPE
    7     | FLOATTYPE
    8     | DOUBLETYPE
    9     | CHARTYPE
   10     | VOID

   11 $@3: %empty

   12 tipo: STRUCT LCURLYB $@3 decls RCURLYB

   13 lista: lista COMMA ID arreglo
   14      | ID arreglo

   15 numero: signo INT
   16       | signo DOUBLE
   17       | signo FLOAT

   18 signo: PLUS
   19      | MINUS
   20      | %empty

   21 arreglo: LBRACKET numero RBRACKET arreglo
   22        | %empty

   23 $@4: %empty

   24 $@5: %empty

   25 $@6: %empty

   26 $@7: %empty

   27 funcs: FUNC tipo ID $@4 LPAR args RPAR $@5 LCURLYB decls sents $@6 RCURLYB $@7 funcs
   28      | %empty

   29 args: lista_args
   30     | %empty

   31 lista_args: lista_args COMMA tipo ID parte_arr
   32           | tipo ID parte_arr

   33 parte_arr: LBRACKET RBRACKET parte_arr
   34          | %empty

   35 $@8: %empty

   36 sents: sents $@8 sent
   37      | sent

   38 $@9: %empty

   39 $@10: %empty

   40 sent: IF LPAR cond RPAR $@9 sent $@10 sentp

   41 @11: %empty

   42 sent: WHILE LPAR cond RPAR @11 sent

   43 @12: %empty

   44 sent: DO @12 sent WHILE LPAR cond RPAR SEMICOLON

   45 @13: %empty

   46 sent: FOR LPAR assign SEMICOLON cond SEMICOLON assign RPAR @13 sent
   47     | assign SEMICOLON
   48     | RETURN exp SEMICOLON
   49     | RETURN SEMICOLON
   50     | LCURLYB sents RCURLYB

   51 @14: %empty

   52 sent: SWITCH LPAR exp RPAR @14 LCURLYB casos RCURLYB
   53     | BREAK SEMICOLON
   54     | PRINT exp SEMICOLON

   55 assign: parte_izq ASSIG exp

   56 sentp: %empty

   57 $@15: %empty

   58 sentp: ELSE $@15 sent

   59 @16: %empty

   60 @17: %empty

   61 casos: CASE numero @16 sent @17 casos
   62      | DEFAULT sent
   63      | %empty

   64 parte_izq: ID
   65          | var_arr
   66          | ID DOT ID

   67 var_arr: ID LBRACKET exp RBRACKET
   68        | var_arr LBRACKET exp RBRACKET

   69 exp: exp PLUS exp
   70    | exp MINUS exp
   71    | exp PROD exp
   72    | exp DIV exp
   73    | exp MOD exp
   74    | var_arr
   75    | ID
   76    | CADENA
   77    | numero
   78    | CARACTER
   79    | ID LPAR params RPAR

   80 params: lista_param
   81       | %empty

   82 lista_param: lista_param COMMA exp
   83            | exp

   84 $@18: %empty

   85 cond: cond OR $@18 cond

   86 $@19: %empty

   87 cond: cond AND $@19 cond
   88     | NOT cond
   89     | LPAR cond RPAR
   90     | exp rel exp
   91     | TRUE
   92     | FALSE

   93 rel: LT
   94    | GT
   95    | LEQ
   96    | GEQ
   97    | NEQ
   98    | EQ


Terminals, with rules where they appear

$end (0) 0
error (256)
END (258)
INTTYPE (259) 6
FLOATTYPE (260) 7
DOUBLETYPE (261) 8
CHARTYPE (262) 9
VOID (263) 10
FUNC (264) 27
STRUCT (265) 12
LCURLYB (266) 12 27 50 52
RCURLYB (267) 12 27 50 52
LBRACKET (268) 21 33 67 68
RBRACKET (269) 21 33 67 68
SEMICOLON (270) 4 44 46 47 48 49 53 54
DOT (271) 66
TRUE (272) 91
FALSE (273) 92
IF (274) 40
ELSE (275) 58
WHILE (276) 42 44
DO (277) 44
SWITCH (278) 52
CASE (279) 61
DEFAULT (280) 62
BREAK (281) 53
PRINT (282) 54
ID (283) 13 14 27 31 32 64 66 67 75 79
INT (284) 15
DOUBLE (285) 16
FLOAT (286) 17
CADENA (287) 76
CARACTER (288) 78
COMMA (289) 13 31 82
RETURN (290) 48 49
FOR (291) 46
ASSIG (292) 55
OR (293) 85
AND (294) 87
EQ (295) 98
NEQ (296) 97
GT (297) 94
GEQ (298) 96
LT (299) 93
LEQ (300) 95
PLUS (301) 18 69
MINUS (302) 19 70
PROD (303) 71
DIV (304) 72
MOD (305) 73
NOT (306) 88
LPAR (307) 27 40 42 44 46 52 79 89
RPAR (308) 27 40 42 44 46 52 79 89
IFX (309)


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
prog (56)
    on left: 2, on right: 0
$@1 (57)
    on left: 1, on right: 2
decls (58)
    on left: 4 5, on right: 2 4 12 27
$@2 (59)
    on left: 3, on right: 4
tipo (60)
    on left: 6 7 8 9 10 12, on right: 4 27 31 32
$@3 (61)
    on left: 11, on right: 12
lista (62)
    on left: 13 14, on right: 4 13
numero (63)
    on left: 15 16 17, on right: 21 61 77
signo (64)
    on left: 18 19 20, on right: 15 16 17
arreglo (65)
    on left: 21 22, on right: 13 14 21
funcs (66)
    on left: 27 28, on right: 2 27
$@4 (67)
    on left: 23, on right: 27
$@5 (68)
    on left: 24, on right: 27
$@6 (69)
    on left: 25, on right: 27
$@7 (70)
    on left: 26, on right: 27
args (71)
    on left: 29 30, on right: 27
lista_args (72)
    on left: 31 32, on right: 29 31
parte_arr (73)
    on left: 33 34, on right: 31 32 33
sents (74)
    on left: 36 37, on right: 27 36 50
$@8 (75)
    on left: 35, on right: 36
sent (76)
    on left: 40 42 44 46 47 48 49 50 52 53 54, on right: 36 37 40 42
    44 46 58 61 62
$@9 (77)
    on left: 38, on right: 40
$@10 (78)
    on left: 39, on right: 40
@11 (79)
    on left: 41, on right: 42
@12 (80)
    on left: 43, on right: 44
@13 (81)
    on left: 45, on right: 46
@14 (82)
    on left: 51, on right: 52
assign (83)
    on left: 55, on right: 46 47
sentp (84)
    on left: 56 58, on right: 40
$@15 (85)
    on left: 57, on right: 58
casos (86)
    on left: 61 62 63, on right: 52 61
@16 (87)
    on left: 59, on right: 61
@17 (88)
    on left: 60, on right: 61
parte_izq (89)
    on left: 64 65 66, on right: 55
var_arr (90)
    on left: 67 68, on right: 65 68 74
exp (91)
    on left: 69 70 71 72 73 74 75 76 77 78 79, on right: 48 52 54 55
    67 68 69 70 71 72 73 82 83 90
params (92)
    on left: 80 81, on right: 79
lista_param (93)
    on left: 82 83, on right: 80 82
cond (94)
    on left: 85 87 88 89 90 91 92, on right: 40 42 44 46 85 87 88 89
$@18 (95)
    on left: 84, on right: 85
$@19 (96)
    on left: 86, on right: 87
rel (97)
    on left: 93 94 95 96 97 98, on right: 90


State 0

    0 $accept: . prog $end

    $default  reduce using rule 1 ($@1)

    prog  go to state 1
    $@1   go to state 2


State 1

    0 $accept: prog . $end

    $end  shift, and go to state 3


State 2

    2 prog: $@1 . decls funcs

    INTTYPE     shift, and go to state 4
    FLOATTYPE   shift, and go to state 5
    DOUBLETYPE  shift, and go to state 6
    CHARTYPE    shift, and go to state 7
    VOID        shift, and go to state 8
    STRUCT      shift, and go to state 9

    $default  reduce using rule 5 (decls)

    decls  go to state 10
    tipo   go to state 11


State 3

    0 $accept: prog $end .

    $default  accept


State 4

    6 tipo: INTTYPE .

    $default  reduce using rule 6 (tipo)


State 5

    7 tipo: FLOATTYPE .

    $default  reduce using rule 7 (tipo)


State 6

    8 tipo: DOUBLETYPE .

    $default  reduce using rule 8 (tipo)


State 7

    9 tipo: CHARTYPE .

    $default  reduce using rule 9 (tipo)


State 8

   10 tipo: VOID .

    $default  reduce using rule 10 (tipo)


State 9

   12 tipo: STRUCT . LCURLYB $@3 decls RCURLYB

    LCURLYB  shift, and go to state 12


State 10

    2 prog: $@1 decls . funcs

    FUNC  shift, and go to state 13

    $default  reduce using rule 28 (funcs)

    funcs  go to state 14


State 11

    4 decls: tipo . $@2 lista SEMICOLON decls

    $default  reduce using rule 3 ($@2)

    $@2  go to state 15


State 12

   12 tipo: STRUCT LCURLYB . $@3 decls RCURLYB

    $default  reduce using rule 11 ($@3)

    $@3  go to state 16


State 13

   27 funcs: FUNC . tipo ID $@4 LPAR args RPAR $@5 LCURLYB decls sents $@6 RCURLYB $@7 funcs

    INTTYPE     shift, and go to state 4
    FLOATTYPE   shift, and go to state 5
    DOUBLETYPE  shift, and go to state 6
    CHARTYPE    shift, and go to state 7
    VOID        shift, and go to state 8
    STRUCT      shift, and go to state 9

    tipo  go to state 17


State 14

    2 prog: $@1 decls funcs .

    $default  reduce using rule 2 (prog)


State 15

    4 decls: tipo $@2 . lista SEMICOLON decls

    ID  shift, and go to state 18

    lista  go to state 19


State 16

   12 tipo: STRUCT LCURLYB $@3 . decls RCURLYB

    INTTYPE     shift, and go to state 4
    FLOATTYPE   shift, and go to state 5
    DOUBLETYPE  shift, and go to state 6
    CHARTYPE    shift, and go to state 7
    VOID        shift, and go to state 8
    STRUCT      shift, and go to state 9

    $default  reduce using rule 5 (decls)

    decls  go to state 20
    tipo   go to state 11


State 17

   27 funcs: FUNC tipo . ID $@4 LPAR args RPAR $@5 LCURLYB decls sents $@6 RCURLYB $@7 funcs

    ID  shift, and go to state 21


State 18

   14 lista: ID . arreglo

    LBRACKET  shift, and go to state 22

    $default  reduce using rule 22 (arreglo)

    arreglo  go to state 23


State 19

    4 decls: tipo $@2 lista . SEMICOLON decls
   13 lista: lista . COMMA ID arreglo

    SEMICOLON  shift, and go to state 24
    COMMA      shift, and go to state 25


State 20

   12 tipo: STRUCT LCURLYB $@3 decls . RCURLYB

    RCURLYB  shift, and go to state 26


State 21

   27 funcs: FUNC tipo ID . $@4 LPAR args RPAR $@5 LCURLYB decls sents $@6 RCURLYB $@7 funcs

    $default  reduce using rule 23 ($@4)

    $@4  go to state 27


State 22

   21 arreglo: LBRACKET . numero RBRACKET arreglo

    PLUS   shift, and go to state 28
    MINUS  shift, and go to state 29

    $default  reduce using rule 20 (signo)

    numero  go to state 30
    signo   go to state 31


State 23

   14 lista: ID arreglo .

    $default  reduce using rule 14 (lista)


State 24

    4 decls: tipo $@2 lista SEMICOLON . decls

    INTTYPE     shift, and go to state 4
    FLOATTYPE   shift, and go to state 5
    DOUBLETYPE  shift, and go to state 6
    CHARTYPE    shift, and go to state 7
    VOID        shift, and go to state 8
    STRUCT      shift, and go to state 9

    $default  reduce using rule 5 (decls)

    decls  go to state 32
    tipo   go to state 11


State 25

   13 lista: lista COMMA . ID arreglo

    ID  shift, and go to state 33


State 26

   12 tipo: STRUCT LCURLYB $@3 decls RCURLYB .

    $default  reduce using rule 12 (tipo)


State 27

   27 funcs: FUNC tipo ID $@4 . LPAR args RPAR $@5 LCURLYB decls sents $@6 RCURLYB $@7 funcs

    LPAR  shift, and go to state 34


State 28

   18 signo: PLUS .

    $default  reduce using rule 18 (signo)


State 29

   19 signo: MINUS .

    $default  reduce using rule 19 (signo)


State 30

   21 arreglo: LBRACKET numero . RBRACKET arreglo

    RBRACKET  shift, and go to state 35


State 31

   15 numero: signo . INT
   16       | signo . DOUBLE
   17       | signo . FLOAT

    INT     shift, and go to state 36
    DOUBLE  shift, and go to state 37
    FLOAT   shift, and go to state 38


State 32

    4 decls: tipo $@2 lista SEMICOLON decls .

    $default  reduce using rule 4 (decls)


State 33

   13 lista: lista COMMA ID . arreglo

    LBRACKET  shift, and go to state 22

    $default  reduce using rule 22 (arreglo)

    arreglo  go to state 39


State 34

   27 funcs: FUNC tipo ID $@4 LPAR . args RPAR $@5 LCURLYB decls sents $@6 RCURLYB $@7 funcs

    INTTYPE     shift, and go to state 4
    FLOATTYPE   shift, and go to state 5
    DOUBLETYPE  shift, and go to state 6
    CHARTYPE    shift, and go to state 7
    VOID        shift, and go to state 8
    STRUCT      shift, and go to state 9

    $default  reduce using rule 30 (args)

    tipo        go to state 40
    args        go to state 41
    lista_args  go to state 42


State 35

   21 arreglo: LBRACKET numero RBRACKET . arreglo

    LBRACKET  shift, and go to state 22

    $default  reduce using rule 22 (arreglo)

    arreglo  go to state 43


State 36

   15 numero: signo INT .

    $default  reduce using rule 15 (numero)


State 37

   16 numero: signo DOUBLE .

    $default  reduce using rule 16 (numero)


State 38

   17 numero: signo FLOAT .

    $default  reduce using rule 17 (numero)


State 39

   13 lista: lista COMMA ID arreglo .

    $default  reduce using rule 13 (lista)


State 40

   32 lista_args: tipo . ID parte_arr

    ID  shift, and go to state 44


State 41

   27 funcs: FUNC tipo ID $@4 LPAR args . RPAR $@5 LCURLYB decls sents $@6 RCURLYB $@7 funcs

    RPAR  shift, and go to state 45


State 42

   29 args: lista_args .
   31 lista_args: lista_args . COMMA tipo ID parte_arr

    COMMA  shift, and go to state 46

    $default  reduce using rule 29 (args)


State 43

   21 arreglo: LBRACKET numero RBRACKET arreglo .

    $default  reduce using rule 21 (arreglo)


State 44

   32 lista_args: tipo ID . parte_arr

    LBRACKET  shift, and go to state 47

    $default  reduce using rule 34 (parte_arr)

    parte_arr  go to state 48


State 45

   27 funcs: FUNC tipo ID $@4 LPAR args RPAR . $@5 LCURLYB decls sents $@6 RCURLYB $@7 funcs

    $default  reduce using rule 24 ($@5)

    $@5  go to state 49


State 46

   31 lista_args: lista_args COMMA . tipo ID parte_arr

    INTTYPE     shift, and go to state 4
    FLOATTYPE   shift, and go to state 5
    DOUBLETYPE  shift, and go to state 6
    CHARTYPE    shift, and go to state 7
    VOID        shift, and go to state 8
    STRUCT      shift, and go to state 9

    tipo  go to state 50


State 47

   33 parte_arr: LBRACKET . RBRACKET parte_arr

    RBRACKET  shift, and go to state 51


State 48

   32 lista_args: tipo ID parte_arr .

    $default  reduce using rule 32 (lista_args)


State 49

   27 funcs: FUNC tipo ID $@4 LPAR args RPAR $@5 . LCURLYB decls sents $@6 RCURLYB $@7 funcs

    LCURLYB  shift, and go to state 52


State 50

   31 lista_args: lista_args COMMA tipo . ID parte_arr

    ID  shift, and go to state 53


State 51

   33 parte_arr: LBRACKET RBRACKET . parte_arr

    LBRACKET  shift, and go to state 47

    $default  reduce using rule 34 (parte_arr)

    parte_arr  go to state 54


State 52

   27 funcs: FUNC tipo ID $@4 LPAR args RPAR $@5 LCURLYB . decls sents $@6 RCURLYB $@7 funcs

    INTTYPE     shift, and go to state 4
    FLOATTYPE   shift, and go to state 5
    DOUBLETYPE  shift, and go to state 6
    CHARTYPE    shift, and go to state 7
    VOID        shift, and go to state 8
    STRUCT      shift, and go to state 9

    $default  reduce using rule 5 (decls)

    decls  go to state 55
    tipo   go to state 11


State 53

   31 lista_args: lista_args COMMA tipo ID . parte_arr

    LBRACKET  shift, and go to state 47

    $default  reduce using rule 34 (parte_arr)

    parte_arr  go to state 56


State 54

   33 parte_arr: LBRACKET RBRACKET parte_arr .

    $default  reduce using rule 33 (parte_arr)


State 55

   27 funcs: FUNC tipo ID $@4 LPAR args RPAR $@5 LCURLYB decls . sents $@6 RCURLYB $@7 funcs

    LCURLYB  shift, and go to state 57
    IF       shift, and go to state 58
    WHILE    shift, and go to state 59
    DO       shift, and go to state 60
    SWITCH   shift, and go to state 61
    BREAK    shift, and go to state 62
    PRINT    shift, and go to state 63
    ID       shift, and go to state 64
    RETURN   shift, and go to state 65
    FOR      shift, and go to state 66

    sents      go to state 67
    sent       go to state 68
    assign     go to state 69
    parte_izq  go to state 70
    var_arr    go to state 71


State 56

   31 lista_args: lista_args COMMA tipo ID parte_arr .

    $default  reduce using rule 31 (lista_args)


State 57

   50 sent: LCURLYB . sents RCURLYB

    LCURLYB  shift, and go to state 57
    IF       shift, and go to state 58
    WHILE    shift, and go to state 59
    DO       shift, and go to state 60
    SWITCH   shift, and go to state 61
    BREAK    shift, and go to state 62
    PRINT    shift, and go to state 63
    ID       shift, and go to state 64
    RETURN   shift, and go to state 65
    FOR      shift, and go to state 66

    sents      go to state 72
    sent       go to state 68
    assign     go to state 69
    parte_izq  go to state 70
    var_arr    go to state 71


State 58

   40 sent: IF . LPAR cond RPAR $@9 sent $@10 sentp

    LPAR  shift, and go to state 73


State 59

   42 sent: WHILE . LPAR cond RPAR @11 sent

    LPAR  shift, and go to state 74


State 60

   44 sent: DO . @12 sent WHILE LPAR cond RPAR SEMICOLON

    $default  reduce using rule 43 (@12)

    @12  go to state 75


State 61

   52 sent: SWITCH . LPAR exp RPAR @14 LCURLYB casos RCURLYB

    LPAR  shift, and go to state 76


State 62

   53 sent: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 77


State 63

   54 sent: PRINT . exp SEMICOLON

    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 83


State 64

   64 parte_izq: ID .
   66          | ID . DOT ID
   67 var_arr: ID . LBRACKET exp RBRACKET

    LBRACKET  shift, and go to state 84
    DOT       shift, and go to state 85

    $default  reduce using rule 64 (parte_izq)


State 65

   48 sent: RETURN . exp SEMICOLON
   49     | RETURN . SEMICOLON

    SEMICOLON  shift, and go to state 86
    ID         shift, and go to state 78
    CADENA     shift, and go to state 79
    CARACTER   shift, and go to state 80
    PLUS       shift, and go to state 28
    MINUS      shift, and go to state 29

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 87


State 66

   46 sent: FOR . LPAR assign SEMICOLON cond SEMICOLON assign RPAR @13 sent

    LPAR  shift, and go to state 88


State 67

   27 funcs: FUNC tipo ID $@4 LPAR args RPAR $@5 LCURLYB decls sents . $@6 RCURLYB $@7 funcs
   36 sents: sents . $@8 sent

    RCURLYB   reduce using rule 25 ($@6)
    $default  reduce using rule 35 ($@8)

    $@6  go to state 89
    $@8  go to state 90


State 68

   37 sents: sent .

    $default  reduce using rule 37 (sents)


State 69

   47 sent: assign . SEMICOLON

    SEMICOLON  shift, and go to state 91


State 70

   55 assign: parte_izq . ASSIG exp

    ASSIG  shift, and go to state 92


State 71

   65 parte_izq: var_arr .
   68 var_arr: var_arr . LBRACKET exp RBRACKET

    LBRACKET  shift, and go to state 93

    $default  reduce using rule 65 (parte_izq)


State 72

   36 sents: sents . $@8 sent
   50 sent: LCURLYB sents . RCURLYB

    RCURLYB  shift, and go to state 94

    $default  reduce using rule 35 ($@8)

    $@8  go to state 90


State 73

   40 sent: IF LPAR . cond RPAR $@9 sent $@10 sentp

    TRUE      shift, and go to state 95
    FALSE     shift, and go to state 96
    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29
    NOT       shift, and go to state 97
    LPAR      shift, and go to state 98

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 99
    cond     go to state 100


State 74

   42 sent: WHILE LPAR . cond RPAR @11 sent

    TRUE      shift, and go to state 95
    FALSE     shift, and go to state 96
    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29
    NOT       shift, and go to state 97
    LPAR      shift, and go to state 98

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 99
    cond     go to state 101


State 75

   44 sent: DO @12 . sent WHILE LPAR cond RPAR SEMICOLON

    LCURLYB  shift, and go to state 57
    IF       shift, and go to state 58
    WHILE    shift, and go to state 59
    DO       shift, and go to state 60
    SWITCH   shift, and go to state 61
    BREAK    shift, and go to state 62
    PRINT    shift, and go to state 63
    ID       shift, and go to state 64
    RETURN   shift, and go to state 65
    FOR      shift, and go to state 66

    sent       go to state 102
    assign     go to state 69
    parte_izq  go to state 70
    var_arr    go to state 71


State 76

   52 sent: SWITCH LPAR . exp RPAR @14 LCURLYB casos RCURLYB

    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 103


State 77

   53 sent: BREAK SEMICOLON .

    $default  reduce using rule 53 (sent)


State 78

   67 var_arr: ID . LBRACKET exp RBRACKET
   75 exp: ID .
   79    | ID . LPAR params RPAR

    LBRACKET  shift, and go to state 84
    LPAR      shift, and go to state 104

    $default  reduce using rule 75 (exp)


State 79

   76 exp: CADENA .

    $default  reduce using rule 76 (exp)


State 80

   78 exp: CARACTER .

    $default  reduce using rule 78 (exp)


State 81

   77 exp: numero .

    $default  reduce using rule 77 (exp)


State 82

   68 var_arr: var_arr . LBRACKET exp RBRACKET
   74 exp: var_arr .

    LBRACKET  shift, and go to state 93

    $default  reduce using rule 74 (exp)


State 83

   54 sent: PRINT exp . SEMICOLON
   69 exp: exp . PLUS exp
   70    | exp . MINUS exp
   71    | exp . PROD exp
   72    | exp . DIV exp
   73    | exp . MOD exp

    SEMICOLON  shift, and go to state 105
    PLUS       shift, and go to state 106
    MINUS      shift, and go to state 107
    PROD       shift, and go to state 108
    DIV        shift, and go to state 109
    MOD        shift, and go to state 110


State 84

   67 var_arr: ID LBRACKET . exp RBRACKET

    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 111


State 85

   66 parte_izq: ID DOT . ID

    ID  shift, and go to state 112


State 86

   49 sent: RETURN SEMICOLON .

    $default  reduce using rule 49 (sent)


State 87

   48 sent: RETURN exp . SEMICOLON
   69 exp: exp . PLUS exp
   70    | exp . MINUS exp
   71    | exp . PROD exp
   72    | exp . DIV exp
   73    | exp . MOD exp

    SEMICOLON  shift, and go to state 113
    PLUS       shift, and go to state 106
    MINUS      shift, and go to state 107
    PROD       shift, and go to state 108
    DIV        shift, and go to state 109
    MOD        shift, and go to state 110


State 88

   46 sent: FOR LPAR . assign SEMICOLON cond SEMICOLON assign RPAR @13 sent

    ID  shift, and go to state 64

    assign     go to state 114
    parte_izq  go to state 70
    var_arr    go to state 71


State 89

   27 funcs: FUNC tipo ID $@4 LPAR args RPAR $@5 LCURLYB decls sents $@6 . RCURLYB $@7 funcs

    RCURLYB  shift, and go to state 115


State 90

   36 sents: sents $@8 . sent

    LCURLYB  shift, and go to state 57
    IF       shift, and go to state 58
    WHILE    shift, and go to state 59
    DO       shift, and go to state 60
    SWITCH   shift, and go to state 61
    BREAK    shift, and go to state 62
    PRINT    shift, and go to state 63
    ID       shift, and go to state 64
    RETURN   shift, and go to state 65
    FOR      shift, and go to state 66

    sent       go to state 116
    assign     go to state 69
    parte_izq  go to state 70
    var_arr    go to state 71


State 91

   47 sent: assign SEMICOLON .

    $default  reduce using rule 47 (sent)


State 92

   55 assign: parte_izq ASSIG . exp

    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 117


State 93

   68 var_arr: var_arr LBRACKET . exp RBRACKET

    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 118


State 94

   50 sent: LCURLYB sents RCURLYB .

    $default  reduce using rule 50 (sent)


State 95

   91 cond: TRUE .

    $default  reduce using rule 91 (cond)


State 96

   92 cond: FALSE .

    $default  reduce using rule 92 (cond)


State 97

   88 cond: NOT . cond

    TRUE      shift, and go to state 95
    FALSE     shift, and go to state 96
    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29
    NOT       shift, and go to state 97
    LPAR      shift, and go to state 98

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 99
    cond     go to state 119


State 98

   89 cond: LPAR . cond RPAR

    TRUE      shift, and go to state 95
    FALSE     shift, and go to state 96
    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29
    NOT       shift, and go to state 97
    LPAR      shift, and go to state 98

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 99
    cond     go to state 120


State 99

   69 exp: exp . PLUS exp
   70    | exp . MINUS exp
   71    | exp . PROD exp
   72    | exp . DIV exp
   73    | exp . MOD exp
   90 cond: exp . rel exp

    EQ     shift, and go to state 121
    NEQ    shift, and go to state 122
    GT     shift, and go to state 123
    GEQ    shift, and go to state 124
    LT     shift, and go to state 125
    LEQ    shift, and go to state 126
    PLUS   shift, and go to state 106
    MINUS  shift, and go to state 107
    PROD   shift, and go to state 108
    DIV    shift, and go to state 109
    MOD    shift, and go to state 110

    rel  go to state 127


State 100

   40 sent: IF LPAR cond . RPAR $@9 sent $@10 sentp
   85 cond: cond . OR $@18 cond
   87     | cond . AND $@19 cond

    OR    shift, and go to state 128
    AND   shift, and go to state 129
    RPAR  shift, and go to state 130


State 101

   42 sent: WHILE LPAR cond . RPAR @11 sent
   85 cond: cond . OR $@18 cond
   87     | cond . AND $@19 cond

    OR    shift, and go to state 128
    AND   shift, and go to state 129
    RPAR  shift, and go to state 131


State 102

   44 sent: DO @12 sent . WHILE LPAR cond RPAR SEMICOLON

    WHILE  shift, and go to state 132


State 103

   52 sent: SWITCH LPAR exp . RPAR @14 LCURLYB casos RCURLYB
   69 exp: exp . PLUS exp
   70    | exp . MINUS exp
   71    | exp . PROD exp
   72    | exp . DIV exp
   73    | exp . MOD exp

    PLUS   shift, and go to state 106
    MINUS  shift, and go to state 107
    PROD   shift, and go to state 108
    DIV    shift, and go to state 109
    MOD    shift, and go to state 110
    RPAR   shift, and go to state 133


State 104

   79 exp: ID LPAR . params RPAR

    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29

    RPAR      reduce using rule 81 (params)
    $default  reduce using rule 20 (signo)

    numero       go to state 81
    signo        go to state 31
    var_arr      go to state 82
    exp          go to state 134
    params       go to state 135
    lista_param  go to state 136


State 105

   54 sent: PRINT exp SEMICOLON .

    $default  reduce using rule 54 (sent)


State 106

   69 exp: exp PLUS . exp

    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 137


State 107

   70 exp: exp MINUS . exp

    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 138


State 108

   71 exp: exp PROD . exp

    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 139


State 109

   72 exp: exp DIV . exp

    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 140


State 110

   73 exp: exp MOD . exp

    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 141


State 111

   67 var_arr: ID LBRACKET exp . RBRACKET
   69 exp: exp . PLUS exp
   70    | exp . MINUS exp
   71    | exp . PROD exp
   72    | exp . DIV exp
   73    | exp . MOD exp

    RBRACKET  shift, and go to state 142
    PLUS      shift, and go to state 106
    MINUS     shift, and go to state 107
    PROD      shift, and go to state 108
    DIV       shift, and go to state 109
    MOD       shift, and go to state 110


State 112

   66 parte_izq: ID DOT ID .

    $default  reduce using rule 66 (parte_izq)


State 113

   48 sent: RETURN exp SEMICOLON .

    $default  reduce using rule 48 (sent)


State 114

   46 sent: FOR LPAR assign . SEMICOLON cond SEMICOLON assign RPAR @13 sent

    SEMICOLON  shift, and go to state 143


State 115

   27 funcs: FUNC tipo ID $@4 LPAR args RPAR $@5 LCURLYB decls sents $@6 RCURLYB . $@7 funcs

    $default  reduce using rule 26 ($@7)

    $@7  go to state 144


State 116

   36 sents: sents $@8 sent .

    $default  reduce using rule 36 (sents)


State 117

   55 assign: parte_izq ASSIG exp .
   69 exp: exp . PLUS exp
   70    | exp . MINUS exp
   71    | exp . PROD exp
   72    | exp . DIV exp
   73    | exp . MOD exp

    PLUS   shift, and go to state 106
    MINUS  shift, and go to state 107
    PROD   shift, and go to state 108
    DIV    shift, and go to state 109
    MOD    shift, and go to state 110

    $default  reduce using rule 55 (assign)


State 118

   68 var_arr: var_arr LBRACKET exp . RBRACKET
   69 exp: exp . PLUS exp
   70    | exp . MINUS exp
   71    | exp . PROD exp
   72    | exp . DIV exp
   73    | exp . MOD exp

    RBRACKET  shift, and go to state 145
    PLUS      shift, and go to state 106
    MINUS     shift, and go to state 107
    PROD      shift, and go to state 108
    DIV       shift, and go to state 109
    MOD       shift, and go to state 110


State 119

   85 cond: cond . OR $@18 cond
   87     | cond . AND $@19 cond
   88     | NOT cond .

    $default  reduce using rule 88 (cond)


State 120

   85 cond: cond . OR $@18 cond
   87     | cond . AND $@19 cond
   89     | LPAR cond . RPAR

    OR    shift, and go to state 128
    AND   shift, and go to state 129
    RPAR  shift, and go to state 146


State 121

   98 rel: EQ .

    $default  reduce using rule 98 (rel)


State 122

   97 rel: NEQ .

    $default  reduce using rule 97 (rel)


State 123

   94 rel: GT .

    $default  reduce using rule 94 (rel)


State 124

   96 rel: GEQ .

    $default  reduce using rule 96 (rel)


State 125

   93 rel: LT .

    $default  reduce using rule 93 (rel)


State 126

   95 rel: LEQ .

    $default  reduce using rule 95 (rel)


State 127

   90 cond: exp rel . exp

    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 147


State 128

   85 cond: cond OR . $@18 cond

    $default  reduce using rule 84 ($@18)

    $@18  go to state 148


State 129

   87 cond: cond AND . $@19 cond

    $default  reduce using rule 86 ($@19)

    $@19  go to state 149


State 130

   40 sent: IF LPAR cond RPAR . $@9 sent $@10 sentp

    $default  reduce using rule 38 ($@9)

    $@9  go to state 150


State 131

   42 sent: WHILE LPAR cond RPAR . @11 sent

    $default  reduce using rule 41 (@11)

    @11  go to state 151


State 132

   44 sent: DO @12 sent WHILE . LPAR cond RPAR SEMICOLON

    LPAR  shift, and go to state 152


State 133

   52 sent: SWITCH LPAR exp RPAR . @14 LCURLYB casos RCURLYB

    $default  reduce using rule 51 (@14)

    @14  go to state 153


State 134

   69 exp: exp . PLUS exp
   70    | exp . MINUS exp
   71    | exp . PROD exp
   72    | exp . DIV exp
   73    | exp . MOD exp
   83 lista_param: exp .

    PLUS   shift, and go to state 106
    MINUS  shift, and go to state 107
    PROD   shift, and go to state 108
    DIV    shift, and go to state 109
    MOD    shift, and go to state 110

    $default  reduce using rule 83 (lista_param)


State 135

   79 exp: ID LPAR params . RPAR

    RPAR  shift, and go to state 154


State 136

   80 params: lista_param .
   82 lista_param: lista_param . COMMA exp

    COMMA  shift, and go to state 155

    $default  reduce using rule 80 (params)


State 137

   69 exp: exp . PLUS exp
   69    | exp PLUS exp .
   70    | exp . MINUS exp
   71    | exp . PROD exp
   72    | exp . DIV exp
   73    | exp . MOD exp

    PROD  shift, and go to state 108
    DIV   shift, and go to state 109
    MOD   shift, and go to state 110

    $default  reduce using rule 69 (exp)


State 138

   69 exp: exp . PLUS exp
   70    | exp . MINUS exp
   70    | exp MINUS exp .
   71    | exp . PROD exp
   72    | exp . DIV exp
   73    | exp . MOD exp

    PROD  shift, and go to state 108
    DIV   shift, and go to state 109
    MOD   shift, and go to state 110

    $default  reduce using rule 70 (exp)


State 139

   69 exp: exp . PLUS exp
   70    | exp . MINUS exp
   71    | exp . PROD exp
   71    | exp PROD exp .
   72    | exp . DIV exp
   73    | exp . MOD exp

    $default  reduce using rule 71 (exp)


State 140

   69 exp: exp . PLUS exp
   70    | exp . MINUS exp
   71    | exp . PROD exp
   72    | exp . DIV exp
   72    | exp DIV exp .
   73    | exp . MOD exp

    $default  reduce using rule 72 (exp)


State 141

   69 exp: exp . PLUS exp
   70    | exp . MINUS exp
   71    | exp . PROD exp
   72    | exp . DIV exp
   73    | exp . MOD exp
   73    | exp MOD exp .

    $default  reduce using rule 73 (exp)


State 142

   67 var_arr: ID LBRACKET exp RBRACKET .

    $default  reduce using rule 67 (var_arr)


State 143

   46 sent: FOR LPAR assign SEMICOLON . cond SEMICOLON assign RPAR @13 sent

    TRUE      shift, and go to state 95
    FALSE     shift, and go to state 96
    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29
    NOT       shift, and go to state 97
    LPAR      shift, and go to state 98

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 99
    cond     go to state 156


State 144

   27 funcs: FUNC tipo ID $@4 LPAR args RPAR $@5 LCURLYB decls sents $@6 RCURLYB $@7 . funcs

    FUNC  shift, and go to state 13

    $default  reduce using rule 28 (funcs)

    funcs  go to state 157


State 145

   68 var_arr: var_arr LBRACKET exp RBRACKET .

    $default  reduce using rule 68 (var_arr)


State 146

   89 cond: LPAR cond RPAR .

    $default  reduce using rule 89 (cond)


State 147

   69 exp: exp . PLUS exp
   70    | exp . MINUS exp
   71    | exp . PROD exp
   72    | exp . DIV exp
   73    | exp . MOD exp
   90 cond: exp rel exp .

    PLUS   shift, and go to state 106
    MINUS  shift, and go to state 107
    PROD   shift, and go to state 108
    DIV    shift, and go to state 109
    MOD    shift, and go to state 110

    $default  reduce using rule 90 (cond)


State 148

   85 cond: cond OR $@18 . cond

    TRUE      shift, and go to state 95
    FALSE     shift, and go to state 96
    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29
    NOT       shift, and go to state 97
    LPAR      shift, and go to state 98

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 99
    cond     go to state 158


State 149

   87 cond: cond AND $@19 . cond

    TRUE      shift, and go to state 95
    FALSE     shift, and go to state 96
    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29
    NOT       shift, and go to state 97
    LPAR      shift, and go to state 98

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 99
    cond     go to state 159


State 150

   40 sent: IF LPAR cond RPAR $@9 . sent $@10 sentp

    LCURLYB  shift, and go to state 57
    IF       shift, and go to state 58
    WHILE    shift, and go to state 59
    DO       shift, and go to state 60
    SWITCH   shift, and go to state 61
    BREAK    shift, and go to state 62
    PRINT    shift, and go to state 63
    ID       shift, and go to state 64
    RETURN   shift, and go to state 65
    FOR      shift, and go to state 66

    sent       go to state 160
    assign     go to state 69
    parte_izq  go to state 70
    var_arr    go to state 71


State 151

   42 sent: WHILE LPAR cond RPAR @11 . sent

    LCURLYB  shift, and go to state 57
    IF       shift, and go to state 58
    WHILE    shift, and go to state 59
    DO       shift, and go to state 60
    SWITCH   shift, and go to state 61
    BREAK    shift, and go to state 62
    PRINT    shift, and go to state 63
    ID       shift, and go to state 64
    RETURN   shift, and go to state 65
    FOR      shift, and go to state 66

    sent       go to state 161
    assign     go to state 69
    parte_izq  go to state 70
    var_arr    go to state 71


State 152

   44 sent: DO @12 sent WHILE LPAR . cond RPAR SEMICOLON

    TRUE      shift, and go to state 95
    FALSE     shift, and go to state 96
    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29
    NOT       shift, and go to state 97
    LPAR      shift, and go to state 98

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 99
    cond     go to state 162


State 153

   52 sent: SWITCH LPAR exp RPAR @14 . LCURLYB casos RCURLYB

    LCURLYB  shift, and go to state 163


State 154

   79 exp: ID LPAR params RPAR .

    $default  reduce using rule 79 (exp)


State 155

   82 lista_param: lista_param COMMA . exp

    ID        shift, and go to state 78
    CADENA    shift, and go to state 79
    CARACTER  shift, and go to state 80
    PLUS      shift, and go to state 28
    MINUS     shift, and go to state 29

    $default  reduce using rule 20 (signo)

    numero   go to state 81
    signo    go to state 31
    var_arr  go to state 82
    exp      go to state 164


State 156

   46 sent: FOR LPAR assign SEMICOLON cond . SEMICOLON assign RPAR @13 sent
   85 cond: cond . OR $@18 cond
   87     | cond . AND $@19 cond

    SEMICOLON  shift, and go to state 165
    OR         shift, and go to state 128
    AND        shift, and go to state 129


State 157

   27 funcs: FUNC tipo ID $@4 LPAR args RPAR $@5 LCURLYB decls sents $@6 RCURLYB $@7 funcs .

    $default  reduce using rule 27 (funcs)


State 158

   85 cond: cond . OR $@18 cond
   85     | cond OR $@18 cond .
   87     | cond . AND $@19 cond

    AND  shift, and go to state 129

    $default  reduce using rule 85 (cond)


State 159

   85 cond: cond . OR $@18 cond
   87     | cond . AND $@19 cond
   87     | cond AND $@19 cond .

    $default  reduce using rule 87 (cond)


State 160

   40 sent: IF LPAR cond RPAR $@9 sent . $@10 sentp

    $default  reduce using rule 39 ($@10)

    $@10  go to state 166


State 161

   42 sent: WHILE LPAR cond RPAR @11 sent .

    $default  reduce using rule 42 (sent)


State 162

   44 sent: DO @12 sent WHILE LPAR cond . RPAR SEMICOLON
   85 cond: cond . OR $@18 cond
   87     | cond . AND $@19 cond

    OR    shift, and go to state 128
    AND   shift, and go to state 129
    RPAR  shift, and go to state 167


State 163

   52 sent: SWITCH LPAR exp RPAR @14 LCURLYB . casos RCURLYB

    CASE     shift, and go to state 168
    DEFAULT  shift, and go to state 169

    $default  reduce using rule 63 (casos)

    casos  go to state 170


State 164

   69 exp: exp . PLUS exp
   70    | exp . MINUS exp
   71    | exp . PROD exp
   72    | exp . DIV exp
   73    | exp . MOD exp
   82 lista_param: lista_param COMMA exp .

    PLUS   shift, and go to state 106
    MINUS  shift, and go to state 107
    PROD   shift, and go to state 108
    DIV    shift, and go to state 109
    MOD    shift, and go to state 110

    $default  reduce using rule 82 (lista_param)


State 165

   46 sent: FOR LPAR assign SEMICOLON cond SEMICOLON . assign RPAR @13 sent

    ID  shift, and go to state 64

    assign     go to state 171
    parte_izq  go to state 70
    var_arr    go to state 71


State 166

   40 sent: IF LPAR cond RPAR $@9 sent $@10 . sentp

    ELSE  shift, and go to state 172

    $default  reduce using rule 56 (sentp)

    sentp  go to state 173


State 167

   44 sent: DO @12 sent WHILE LPAR cond RPAR . SEMICOLON

    SEMICOLON  shift, and go to state 174


State 168

   61 casos: CASE . numero @16 sent @17 casos

    PLUS   shift, and go to state 28
    MINUS  shift, and go to state 29

    $default  reduce using rule 20 (signo)

    numero  go to state 175
    signo   go to state 31


State 169

   62 casos: DEFAULT . sent

    LCURLYB  shift, and go to state 57
    IF       shift, and go to state 58
    WHILE    shift, and go to state 59
    DO       shift, and go to state 60
    SWITCH   shift, and go to state 61
    BREAK    shift, and go to state 62
    PRINT    shift, and go to state 63
    ID       shift, and go to state 64
    RETURN   shift, and go to state 65
    FOR      shift, and go to state 66

    sent       go to state 176
    assign     go to state 69
    parte_izq  go to state 70
    var_arr    go to state 71


State 170

   52 sent: SWITCH LPAR exp RPAR @14 LCURLYB casos . RCURLYB

    RCURLYB  shift, and go to state 177


State 171

   46 sent: FOR LPAR assign SEMICOLON cond SEMICOLON assign . RPAR @13 sent

    RPAR  shift, and go to state 178


State 172

   58 sentp: ELSE . $@15 sent

    $default  reduce using rule 57 ($@15)

    $@15  go to state 179


State 173

   40 sent: IF LPAR cond RPAR $@9 sent $@10 sentp .

    $default  reduce using rule 40 (sent)


State 174

   44 sent: DO @12 sent WHILE LPAR cond RPAR SEMICOLON .

    $default  reduce using rule 44 (sent)


State 175

   61 casos: CASE numero . @16 sent @17 casos

    $default  reduce using rule 59 (@16)

    @16  go to state 180


State 176

   62 casos: DEFAULT sent .

    $default  reduce using rule 62 (casos)


State 177

   52 sent: SWITCH LPAR exp RPAR @14 LCURLYB casos RCURLYB .

    $default  reduce using rule 52 (sent)


State 178

   46 sent: FOR LPAR assign SEMICOLON cond SEMICOLON assign RPAR . @13 sent

    $default  reduce using rule 45 (@13)

    @13  go to state 181


State 179

   58 sentp: ELSE $@15 . sent

    LCURLYB  shift, and go to state 57
    IF       shift, and go to state 58
    WHILE    shift, and go to state 59
    DO       shift, and go to state 60
    SWITCH   shift, and go to state 61
    BREAK    shift, and go to state 62
    PRINT    shift, and go to state 63
    ID       shift, and go to state 64
    RETURN   shift, and go to state 65
    FOR      shift, and go to state 66

    sent       go to state 182
    assign     go to state 69
    parte_izq  go to state 70
    var_arr    go to state 71


State 180

   61 casos: CASE numero @16 . sent @17 casos

    LCURLYB  shift, and go to state 57
    IF       shift, and go to state 58
    WHILE    shift, and go to state 59
    DO       shift, and go to state 60
    SWITCH   shift, and go to state 61
    BREAK    shift, and go to state 62
    PRINT    shift, and go to state 63
    ID       shift, and go to state 64
    RETURN   shift, and go to state 65
    FOR      shift, and go to state 66

    sent       go to state 183
    assign     go to state 69
    parte_izq  go to state 70
    var_arr    go to state 71


State 181

   46 sent: FOR LPAR assign SEMICOLON cond SEMICOLON assign RPAR @13 . sent

    LCURLYB  shift, and go to state 57
    IF       shift, and go to state 58
    WHILE    shift, and go to state 59
    DO       shift, and go to state 60
    SWITCH   shift, and go to state 61
    BREAK    shift, and go to state 62
    PRINT    shift, and go to state 63
    ID       shift, and go to state 64
    RETURN   shift, and go to state 65
    FOR      shift, and go to state 66

    sent       go to state 184
    assign     go to state 69
    parte_izq  go to state 70
    var_arr    go to state 71


State 182

   58 sentp: ELSE $@15 sent .

    $default  reduce using rule 58 (sentp)


State 183

   61 casos: CASE numero @16 sent . @17 casos

    $default  reduce using rule 60 (@17)

    @17  go to state 185


State 184

   46 sent: FOR LPAR assign SEMICOLON cond SEMICOLON assign RPAR @13 sent .

    $default  reduce using rule 46 (sent)


State 185

   61 casos: CASE numero @16 sent @17 . casos

    CASE     shift, and go to state 168
    DEFAULT  shift, and go to state 169

    $default  reduce using rule 63 (casos)

    casos  go to state 186


State 186

   61 casos: CASE numero @16 sent @17 casos .

    $default  reduce using rule 61 (casos)
